# Production override for docker-compose.yml
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  # Production database configuration
  database:
    restart: always
    environment:
      # Production database settings
      POSTGRES_DB: ${POSTGRES_DB:-inventory_db_prod}
      POSTGRES_USER: ${POSTGRES_USER:-inventory_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
    volumes:
      # Use named volume for production data
      - postgres_prod_data:/var/lib/postgresql/data
      # Remove initialization script in production (should be handled by migrations)
    ports: []  # Don't expose PostgreSQL port in production
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Production API configuration
  api:
    restart: always
    environment:
      # Production environment variables (use secrets in real deployment)
      TUI_INVENTORY_DATABASE_HOST: database
      TUI_INVENTORY_DATABASE_PORT: 5432
      TUI_INVENTORY_DATABASE_USER: ${POSTGRES_USER:-inventory_user}
      TUI_INVENTORY_DATABASE_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      TUI_INVENTORY_DATABASE_DBNAME: ${POSTGRES_DB:-inventory_db_prod}
      TUI_INVENTORY_DATABASE_SSLMODE: require
      
      # Server configuration
      TUI_INVENTORY_SERVER_HOST: 0.0.0.0
      TUI_INVENTORY_SERVER_PORT: 9090
      
      # Security configuration (use secrets)
      TUI_INVENTORY_SECURITY_JWT_SECRET: ${JWT_SECRET:?JWT_SECRET is required}
      TUI_INVENTORY_SECURITY_PASSWORD_MIN_LENGTH: 12
      TUI_INVENTORY_SECURITY_SESSION_TIMEOUT_MINUTES: 120
      TUI_INVENTORY_SECURITY_MAX_LOGIN_ATTEMPTS: 3
      
      # Logging configuration
      TUI_INVENTORY_LOGGING_LEVEL: warn
      TUI_INVENTORY_LOGGING_FORMAT: json
      TUI_INVENTORY_LOGGING_OUTPUT_PATH: /root/logs/app.log
      TUI_INVENTORY_LOGGING_MAX_SIZE_MB: 100
      TUI_INVENTORY_LOGGING_MAX_BACKUPS: 30
      TUI_INVENTORY_LOGGING_MAX_AGE_DAYS: 90
      
      # Production mode
      GIN_MODE: release
      
    ports: []  # Don't expose API port directly in production (use nginx)
    
    volumes:
      - api_prod_logs:/root/logs
      - api_prod_data:/root/data
    
    deploy:
      replicas: 2  # Run multiple instances for high availability
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3

  # Production Redis configuration
  redis:
    restart: always
    ports: []  # Don't expose Redis port in production
    volumes:
      - redis_prod_data:/data
      - ./docker/redis.prod.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Production Nginx with SSL
  nginx:
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_prod_logs:/var/log/nginx
      - certbot_certs:/etc/letsencrypt:ro
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Production Prometheus configuration
  prometheus:
    restart: always
    ports:
      - "127.0.0.1:9090:9090"  # Only accessible from localhost
    volumes:
      - ./docker/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Production Grafana configuration
  grafana:
    restart: always
    ports:
      - "127.0.0.1:9000:9000"  # Only accessible from localhost
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:?GRAFANA_PASSWORD is required}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY:?GRAFANA_SECRET_KEY is required}
      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST: ${SMTP_HOST:-localhost:587}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
      GF_SMTP_FROM_ADDRESS: ${SMTP_FROM:-noreply@example.com}
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Certbot for SSL certificates (Let's Encrypt)
  certbot:
    image: certbot/certbot:latest
    container_name: inventory-certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${CERT_EMAIL:?CERT_EMAIL is required} --agree-tos --no-eff-email -d ${DOMAIN:?DOMAIN is required}

  # Log aggregation (optional)
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: inventory-fluentd
    restart: unless-stopped
    volumes:
      - ./docker/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - api_prod_logs:/var/log/api:ro
      - nginx_prod_logs:/var/log/nginx:ro
    ports:
      - "24224:24224"
    networks:
      - inventory-network

  # Backup service
  backup:
    image: postgres:16-alpine
    container_name: inventory-backup
    restart: "no"
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      PGUSER: ${POSTGRES_USER:-inventory_user}
      PGPASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      PGDATABASE: ${POSTGRES_DB:-inventory_db_prod}
      PGHOST: database
    networks:
      - inventory-network
    depends_on:
      - database
    entrypoint: /backup.sh
    profiles:
      - backup

# Production volumes
volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/inventory_postgres_prod/_data
  redis_prod_data:
    driver: local
  api_prod_logs:
    driver: local
  api_prod_data:
    driver: local
  nginx_prod_logs:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  certbot_certs:
    driver: local
  certbot_www:
    driver: local