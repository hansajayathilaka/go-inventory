version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: inventory-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Inventory Management API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory-api
    restart: unless-stopped
    environment:
      # Database Configuration
      TUI_INVENTORY_DATABASE_HOST: database
      TUI_INVENTORY_DATABASE_PORT: 5432
      TUI_INVENTORY_DATABASE_USER: inventory_user
      TUI_INVENTORY_DATABASE_PASSWORD: inventory_pass
      TUI_INVENTORY_DATABASE_DBNAME: inventory_db
      TUI_INVENTORY_DATABASE_SSLMODE: disable
      
      # Server Configuration
      TUI_INVENTORY_SERVER_HOST: 0.0.0.0
      TUI_INVENTORY_SERVER_PORT: 9090
      
      # Security Configuration
      TUI_INVENTORY_SECURITY_JWT_SECRET: "production-jwt-secret-change-this-in-production"
      TUI_INVENTORY_SECURITY_PASSWORD_MIN_LENGTH: 8
      TUI_INVENTORY_SECURITY_SESSION_TIMEOUT_MINUTES: 480
      TUI_INVENTORY_SECURITY_MAX_LOGIN_ATTEMPTS: 5
      
      # Logging Configuration
      TUI_INVENTORY_LOGGING_LEVEL: info
      TUI_INVENTORY_LOGGING_FORMAT: json
      TUI_INVENTORY_LOGGING_OUTPUT_PATH: /root/logs/app.log
    ports:
      - "9090:9090"
    volumes:
      - api_logs:/root/logs
      - api_data:/root/data
    networks:
      - inventory-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for Caching (Optional - for future enhancement)
  redis:
    image: redis:7-alpine
    container_name: inventory-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: inventory-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - inventory-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: inventory-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - inventory-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: inventory-grafana
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - inventory-network
    depends_on:
      - prometheus

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  api_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network
networks:
  inventory-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16