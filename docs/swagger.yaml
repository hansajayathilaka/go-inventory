basePath: /api/v1
definitions:
  CategoryHierarchyResponse:
    description: Hierarchical representation of categories
    properties:
      category:
        $ref: '#/definitions/CategoryResponse'
      children:
        items:
          $ref: '#/definitions/CategoryHierarchyResponse'
        type: array
    type: object
  CategoryListResponse:
    description: Paginated list of categories
    properties:
      categories:
        items:
          $ref: '#/definitions/CategoryResponse'
        type: array
      pagination:
        $ref: '#/definitions/PaginationResponse'
    type: object
  CategoryPathResponse:
    description: Category path from root to target category
    properties:
      path:
        items:
          $ref: '#/definitions/CategoryResponse'
        type: array
    type: object
  CategoryResponse:
    description: Category information in API responses
    properties:
      children_count:
        example: 5
        type: integer
      created_at:
        example: "2024-01-15T09:30:00Z"
        type: string
      description:
        example: Electronic devices and accessories
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      level:
        example: 1
        type: integer
      name:
        example: Electronics
        type: string
      parent_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      path:
        example: Electronics/Computers
        type: string
      updated_at:
        example: "2024-01-15T09:30:00Z"
        type: string
    type: object
  CreateCategoryRequest:
    description: Request payload for creating a new category
    properties:
      description:
        example: Electronic devices and accessories
        maxLength: 500
        type: string
      name:
        example: Electronics
        maxLength: 100
        minLength: 1
        type: string
      parent_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - name
    type: object
  ErrorResponse:
    description: Standard error API response structure
    properties:
      error:
        example: Invalid request
        type: string
      message:
        example: Detailed error message
        type: string
    type: object
  MoveCategoryRequest:
    description: Request payload for moving a category to a different parent
    properties:
      new_parent_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
    type: object
  PaginationResponse:
    description: Pagination information for list responses
    properties:
      page:
        example: 1
        type: integer
      page_size:
        example: 20
        type: integer
      total:
        example: 100
        type: integer
    type: object
  SuccessResponse:
    description: Standard successful API response structure
    properties:
      data: {}
      message:
        example: Operation completed successfully
        type: string
    type: object
  UpdateCategoryRequest:
    description: Request payload for updating an existing category
    properties:
      description:
        example: Electronic devices and accessories
        maxLength: 500
        type: string
      name:
        example: Electronics
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  dto.BaseResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - manager
        - staff
        - viewer
        example: manager
        type: string
      username:
        example: john_doe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  dto.ErrorInfo:
    properties:
      code:
        example: VALIDATION_ERROR
        type: string
      details:
        example: Name field is required
        type: string
      message:
        example: Invalid input parameters
        type: string
    type: object
  dto.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      expires_at:
        example: "2023-01-02T12:00:00Z"
        type: string
      refresh_token:
        example: refresh_token_here
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.PaginatedResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: Operation completed successfully
        type: string
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
      success:
        example: true
        type: boolean
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.PaginationInfo:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 10
        type: integer
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        example: john_updated@example.com
        type: string
      role:
        enum:
        - admin
        - manager
        - staff
        - viewer
        example: staff
        type: string
      username:
        example: john_doe_updated
        maxLength: 50
        minLength: 3
        type: string
    type: object
  dto.UserResponse:
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      last_login:
        example: "2023-01-01T12:00:00Z"
        type: string
      role:
        enum:
        - admin
        - manager
        - staff
        - viewer
        example: manager
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      username:
        example: john_doe
        type: string
    type: object
  router.HealthResponse:
    properties:
      status:
        example: ok
        type: string
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A comprehensive inventory management system API with multi-location
    support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Inventory Management API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return login information
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Log out the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: User logout
      tags:
      - Authentication
  /categories:
    get:
      consumes:
      - application/json
      description: Get a paginated list of categories with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: page_size
        type: integer
      - description: Filter by category level (0-5)
        in: query
        name: level
        type: integer
      - description: Filter by parent category ID
        in: query
        name: parent_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create category
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category (must not have products or subcategories)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Get category details by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update category information
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update category
      tags:
      - categories
  /categories/{id}/children:
    get:
      consumes:
      - application/json
      description: Get all child categories of a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/CategoryResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category children
      tags:
      - categories
  /categories/{id}/hierarchy:
    get:
      consumes:
      - application/json
      description: Get the complete hierarchical tree of categories from a root category
      parameters:
      - description: Root category ID (optional, if not provided returns all root
          categories)
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryHierarchyResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category hierarchy
      tags:
      - categories
  /categories/{id}/move:
    put:
      consumes:
      - application/json
      description: Move a category to a different parent (or root level)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Move information
        in: body
        name: move
        required: true
        schema:
          $ref: '#/definitions/MoveCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Move category
      tags:
      - categories
  /categories/{id}/path:
    get:
      consumes:
      - application/json
      description: Get the path from root to the specified category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryPathResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category path
      tags:
      - categories
  /categories/hierarchy:
    get:
      consumes:
      - application/json
      description: Get the complete hierarchical tree of categories from a root category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryHierarchyResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category hierarchy
      tags:
      - categories
  /categories/roots:
    get:
      consumes:
      - application/json
      description: Get all root-level categories (categories with no parent)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/CategoryResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get root categories
      tags:
      - categories
  /health:
    get:
      description: Returns the health status of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.HealthResponse'
      summary: Health check
      tags:
      - System
  /users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by role
        enum:
        - admin
        - manager
        - staff
        - viewer
        in: query
        name: role
        type: string
      - description: Search by username or email
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a specific user by their ID
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: User update request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update a user
      tags:
      - Users
swagger: "2.0"
