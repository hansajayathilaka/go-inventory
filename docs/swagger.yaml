basePath: /api/v1
definitions:
  ApiResponse:
    description: Simple API response with success status, message and data
    properties:
      data: {}
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  CategoryHierarchyResponse:
    description: Hierarchical representation of categories
    properties:
      category:
        $ref: '#/definitions/CategoryResponse'
      children:
        items:
          $ref: '#/definitions/CategoryHierarchyResponse'
        type: array
    type: object
  CategoryListResponse:
    description: Paginated list of categories
    properties:
      categories:
        items:
          $ref: '#/definitions/CategoryResponse'
        type: array
      pagination:
        $ref: '#/definitions/PaginationResponse'
    type: object
  CategoryPathResponse:
    description: Category path from root to target category
    properties:
      path:
        items:
          $ref: '#/definitions/CategoryResponse'
        type: array
    type: object
  CategoryResponse:
    description: Category information in API responses
    properties:
      children_count:
        example: 5
        type: integer
      created_at:
        example: "2024-01-15T09:30:00Z"
        type: string
      description:
        example: Electronic devices and accessories
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      level:
        example: 1
        type: integer
      name:
        example: Electronics
        type: string
      parent_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      path:
        example: Electronics/Computers
        type: string
      updated_at:
        example: "2024-01-15T09:30:00Z"
        type: string
    type: object
  CreateCategoryRequest:
    description: Request payload for creating a new category
    properties:
      description:
        example: Electronic devices and accessories
        maxLength: 500
        type: string
      name:
        example: Electronics
        maxLength: 100
        minLength: 1
        type: string
      parent_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - name
    type: object
  ErrorResponse:
    description: Standard error API response structure
    properties:
      error:
        example: Invalid request
        type: string
      message:
        example: Detailed error message
        type: string
    type: object
  LocationCreateRequest:
    description: Request body for creating a new location
    properties:
      address:
        example: 123 Storage St, Industrial District, City 12345
        maxLength: 500
        type: string
      code:
        example: WH001
        maxLength: 20
        minLength: 1
        type: string
      description:
        example: Primary storage facility
        maxLength: 500
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Main Warehouse
        maxLength: 100
        minLength: 1
        type: string
      type:
        enum:
        - warehouse
        - store
        - online
        example: warehouse
        type: string
    required:
    - code
    - name
    - type
    type: object
  LocationDetailResponse:
    description: Detailed location information returned by the API
    properties:
      address:
        example: 123 Storage St, Industrial District, City 12345
        type: string
      code:
        example: WH001
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      description:
        example: Primary storage facility
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Main Warehouse
        type: string
      type:
        example: warehouse
        type: string
      updated_at:
        example: "2023-01-02T12:00:00Z"
        type: string
    type: object
  LocationListResponse:
    description: Paginated list of locations with metadata
    properties:
      locations:
        items:
          $ref: '#/definitions/LocationDetailResponse'
        type: array
      pagination:
        $ref: '#/definitions/PaginationResponse'
    type: object
  LocationUpdateRequest:
    description: Request body for updating an existing location
    properties:
      address:
        example: 123 Storage St, Industrial District, City 12345
        maxLength: 500
        type: string
      code:
        example: WH001
        maxLength: 20
        minLength: 1
        type: string
      description:
        example: Primary storage facility
        maxLength: 500
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Main Warehouse
        maxLength: 100
        minLength: 1
        type: string
      type:
        enum:
        - warehouse
        - store
        - online
        example: warehouse
        type: string
    required:
    - code
    - name
    - type
    type: object
  MoveCategoryRequest:
    description: Request payload for moving a category to a different parent
    properties:
      new_parent_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
    type: object
  PaginationResponse:
    description: Pagination information for list responses
    properties:
      page:
        example: 1
        type: integer
      page_size:
        example: 20
        type: integer
      total:
        example: 100
        type: integer
    type: object
  SuccessResponse:
    description: Standard successful API response structure
    properties:
      data: {}
      message:
        example: Operation completed successfully
        type: string
    type: object
  SupplierCreateRequest:
    description: Request body for creating a new supplier
    properties:
      address:
        example: 123 Business St, City, State 12345
        maxLength: 500
        type: string
      code:
        example: ACME001
        maxLength: 20
        minLength: 1
        type: string
      contact_name:
        example: John Smith
        maxLength: 100
        type: string
      email:
        example: contact@acme.com
        maxLength: 100
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: ACME Corporation
        maxLength: 100
        minLength: 1
        type: string
      notes:
        example: Primary supplier for widgets
        maxLength: 1000
        type: string
      phone:
        example: +1-555-123-4567
        maxLength: 20
        type: string
    required:
    - code
    - name
    type: object
  SupplierDetailResponse:
    description: Detailed supplier information returned by the API
    properties:
      address:
        example: 123 Business St, City, State 12345
        type: string
      code:
        example: ACME001
        type: string
      contact_name:
        example: John Smith
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      email:
        example: contact@acme.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: ACME Corporation
        type: string
      notes:
        example: Primary supplier for widgets
        type: string
      phone:
        example: +1-555-123-4567
        type: string
      updated_at:
        example: "2023-01-02T12:00:00Z"
        type: string
    type: object
  SupplierListResponse:
    description: Paginated list of suppliers with metadata
    properties:
      pagination:
        $ref: '#/definitions/PaginationResponse'
      suppliers:
        items:
          $ref: '#/definitions/SupplierDetailResponse'
        type: array
    type: object
  SupplierUpdateRequest:
    description: Request body for updating an existing supplier
    properties:
      address:
        example: 123 Business St, City, State 12345
        maxLength: 500
        type: string
      code:
        example: ACME001
        maxLength: 20
        minLength: 1
        type: string
      contact_name:
        example: John Smith
        maxLength: 100
        type: string
      email:
        example: contact@acme.com
        maxLength: 100
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: ACME Corporation
        maxLength: 100
        minLength: 1
        type: string
      notes:
        example: Primary supplier for widgets
        maxLength: 1000
        type: string
      phone:
        example: +1-555-123-4567
        maxLength: 20
        type: string
    required:
    - code
    - name
    type: object
  UpdateCategoryRequest:
    description: Request payload for updating an existing category
    properties:
      description:
        example: Electronic devices and accessories
        maxLength: 500
        type: string
      name:
        example: Electronics
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  dto.BaseResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.CreateInventoryRequest:
    properties:
      location_id:
        type: string
      product_id:
        type: string
      quantity:
        minimum: 0
        type: integer
      reorder_level:
        minimum: 0
        type: integer
      reserved_quantity:
        minimum: 0
        type: integer
    required:
    - location_id
    - product_id
    - quantity
    - reorder_level
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - manager
        - staff
        - viewer
        example: manager
        type: string
      username:
        example: john_doe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  dto.ErrorInfo:
    properties:
      code:
        example: VALIDATION_ERROR
        type: string
      details:
        example: Name field is required
        type: string
      message:
        example: Invalid input parameters
        type: string
    type: object
  dto.InventoryResponse:
    properties:
      id:
        type: string
      last_updated:
        type: string
      location_id:
        type: string
      location_name:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
      quantity:
        type: integer
      reorder_level:
        type: integer
      reserved_quantity:
        type: integer
    type: object
  dto.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      expires_at:
        example: "2023-01-02T12:00:00Z"
        type: string
      refresh_token:
        example: refresh_token_here
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.LowStockItemResponse:
    properties:
      deficit:
        type: integer
      location_id:
        type: string
      location_name:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
      quantity:
        type: integer
      reorder_level:
        type: integer
    type: object
  dto.PaginatedResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: Operation completed successfully
        type: string
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
      success:
        example: true
        type: boolean
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.PaginationInfo:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 10
        type: integer
    type: object
  dto.ProductCreateRequest:
    properties:
      barcode:
        example: "1234567890123"
        type: string
      category_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      cost_price:
        example: 10.5
        type: number
      description:
        example: A sample product for demonstration
        type: string
      dimensions:
        example: 10x5x2 cm
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Sample Product
        type: string
      retail_price:
        example: 15.99
        type: number
      sku:
        example: PROD-001
        type: string
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      weight:
        example: 0.5
        type: number
      wholesale_price:
        example: 12.5
        type: number
    required:
    - category_id
    - name
    - sku
    type: object
  dto.ProductInventoryResponse:
    properties:
      available_quantity:
        example: 45
        type: integer
      location_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      location_name:
        example: Main Warehouse
        type: string
      max_level:
        example: 100
        type: integer
      quantity:
        example: 50
        type: integer
      reorder_level:
        example: 10
        type: integer
      reserved_quantity:
        example: 5
        type: integer
    type: object
  dto.ProductListResponse:
    properties:
      page:
        example: 1
        type: integer
      per_page:
        example: 20
        type: integer
      products:
        items:
          $ref: '#/definitions/dto.ProductResponse'
        type: array
      total:
        example: 150
        type: integer
      total_pages:
        example: 8
        type: integer
    type: object
  dto.ProductResponse:
    properties:
      barcode:
        example: "1234567890123"
        type: string
      category:
        $ref: '#/definitions/CategoryResponse'
      category_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      cost_price:
        example: 10.5
        type: number
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: A sample product for demonstration
        type: string
      dimensions:
        example: 10x5x2 cm
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      inventory:
        items:
          $ref: '#/definitions/dto.ProductInventoryResponse'
        type: array
      is_active:
        example: true
        type: boolean
      name:
        example: Sample Product
        type: string
      retail_price:
        example: 15.99
        type: number
      sku:
        example: PROD-001
        type: string
      supplier:
        $ref: '#/definitions/dto.SupplierResponse'
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      total_stock:
        example: 100
        type: integer
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      weight:
        example: 0.5
        type: number
      wholesale_price:
        example: 12.5
        type: number
    type: object
  dto.ProductUpdateRequest:
    properties:
      barcode:
        example: "1234567890124"
        type: string
      category_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      cost_price:
        example: 11
        type: number
      description:
        example: Updated description
        type: string
      dimensions:
        example: 11x5x2 cm
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Updated Product Name
        type: string
      retail_price:
        example: 16.99
        type: number
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      weight:
        example: 0.6
        type: number
      wholesale_price:
        example: 13.5
        type: number
    type: object
  dto.ReorderLevelUpdate:
    properties:
      location_id:
        type: string
      product_id:
        type: string
      reorder_level:
        minimum: 0
        type: integer
    required:
    - location_id
    - product_id
    - reorder_level
    type: object
  dto.StockAdjustmentRequest:
    properties:
      location_id:
        type: string
      movement_type:
        enum:
        - IN
        - OUT
        - ADJUSTMENT
        type: string
      notes:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
    required:
    - location_id
    - movement_type
    - product_id
    - quantity
    type: object
  dto.StockMovementResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      location_id:
        type: string
      location_name:
        type: string
      movement_type:
        type: string
      notes:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
      quantity:
        type: integer
      reference_id:
        type: string
      user_id:
        type: string
    type: object
  dto.StockTransferRequest:
    properties:
      from_location_id:
        type: string
      notes:
        type: string
      product_id:
        type: string
      quantity:
        minimum: 1
        type: integer
      to_location_id:
        type: string
    required:
    - from_location_id
    - product_id
    - quantity
    - to_location_id
    type: object
  dto.StockTransferResponse:
    properties:
      created_at:
        type: string
      from_location_id:
        type: string
      notes:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      to_location_id:
        type: string
      transfer_id:
        type: string
      user_id:
        type: string
    type: object
  dto.SupplierResponse:
    properties:
      code:
        example: SUP-001
        type: string
      email:
        example: supplier@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Supplier Name
        type: string
      phone:
        example: +1-555-0123
        type: string
    type: object
  dto.UpdateReorderLevelsRequest:
    properties:
      reorder_levels:
        items:
          $ref: '#/definitions/dto.ReorderLevelUpdate'
        minItems: 1
        type: array
    required:
    - reorder_levels
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        example: john_updated@example.com
        type: string
      role:
        enum:
        - admin
        - manager
        - staff
        - viewer
        example: staff
        type: string
      username:
        example: john_doe_updated
        maxLength: 50
        minLength: 3
        type: string
    type: object
  dto.UserResponse:
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      last_login:
        example: "2023-01-01T12:00:00Z"
        type: string
      role:
        enum:
        - admin
        - manager
        - staff
        - viewer
        example: manager
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      username:
        example: john_doe
        type: string
    type: object
  dto.ZeroStockItemResponse:
    properties:
      last_updated:
        type: string
      location_id:
        type: string
      location_name:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
    type: object
  router.HealthResponse:
    properties:
      status:
        example: ok
        type: string
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A comprehensive inventory management system API with multi-location
    support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Inventory Management API
  version: "1.0"
paths:
  /api/v1/inventory:
    get:
      consumes:
      - application/json
      description: Get a paginated list of inventory records with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by location ID
        in: query
        name: location_id
        type: string
      - description: Filter by product ID
        in: query
        name: product_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.InventoryResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List inventory records
      tags:
      - inventory
    post:
      consumes:
      - application/json
      description: Create a new inventory record for a product at a location
      parameters:
      - description: Inventory data
        in: body
        name: inventory
        required: true
        schema:
          $ref: '#/definitions/dto.CreateInventoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.InventoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create inventory record
      tags:
      - inventory
  /api/v1/inventory/adjust:
    post:
      consumes:
      - application/json
      description: Adjust stock levels for a product (increase or decrease)
      parameters:
      - description: Stock adjustment data
        in: body
        name: adjustment
        required: true
        schema:
          $ref: '#/definitions/dto.StockAdjustmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.StockMovementResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Adjust stock levels
      tags:
      - inventory
  /api/v1/inventory/low-stock:
    get:
      consumes:
      - application/json
      description: Get items that are at or below their reorder level
      parameters:
      - description: Filter by location ID
        in: query
        name: location_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.LowStockItemResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get low stock items
      tags:
      - inventory
  /api/v1/inventory/reorder-levels:
    put:
      consumes:
      - application/json
      description: Update reorder levels for multiple inventory records
      parameters:
      - description: Reorder levels data
        in: body
        name: levels
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateReorderLevelsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update reorder levels
      tags:
      - inventory
  /api/v1/inventory/transfer:
    post:
      consumes:
      - application/json
      description: Transfer stock from one location to another
      parameters:
      - description: Stock transfer data
        in: body
        name: transfer
        required: true
        schema:
          $ref: '#/definitions/dto.StockTransferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.StockTransferResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Transfer stock between locations
      tags:
      - inventory
  /api/v1/inventory/zero-stock:
    get:
      consumes:
      - application/json
      description: Get items that are completely out of stock
      parameters:
      - description: Filter by location ID
        in: query
        name: location_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ZeroStockItemResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get zero stock items
      tags:
      - inventory
  /api/v1/locations:
    get:
      description: Get a paginated list of all locations
      parameters:
      - default: 1
        description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - default: 50
        description: 'Items per page (default: 50, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Filter by location type
        enum:
        - warehouse
        - store
        - online
        in: query
        name: type
        type: string
      - description: Filter by active status
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Locations retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/LocationListResponse'
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List all locations
      tags:
      - locations
    post:
      consumes:
      - application/json
      description: Create a new location in the system
      parameters:
      - description: Location creation data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/LocationCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Location created successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/LocationDetailResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Location already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new location
      tags:
      - locations
  /api/v1/locations/{id}:
    delete:
      description: Delete an existing location from the system
      parameters:
      - description: Location ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Location deleted successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid location ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Location not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a location
      tags:
      - locations
    get:
      description: Get detailed information about a specific location
      parameters:
      - description: Location ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Location retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/LocationDetailResponse'
              type: object
        "400":
          description: Invalid location ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Location not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a location by ID
      tags:
      - locations
    put:
      consumes:
      - application/json
      description: Update an existing location's information
      parameters:
      - description: Location ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Location update data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/LocationUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Location updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/LocationDetailResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Location not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Location code already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a location
      tags:
      - locations
  /api/v1/locations/{id}/inventory:
    get:
      description: Get all inventory records for a specific location
      parameters:
      - description: Location ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Location inventory retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.InventoryResponse'
                  type: array
              type: object
        "400":
          description: Invalid location ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Location not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get inventory for a location
      tags:
      - locations
  /api/v1/products:
    get:
      consumes:
      - application/json
      description: Get a paginated list of products with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: per_page
        type: integer
      - description: Filter by category ID
        in: query
        name: category_id
        type: string
      - description: Filter by supplier ID
        in: query
        name: supplier_id
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductListResponse'
              type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product in the system
      parameters:
      - description: Product creation data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Product already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new product
      tags:
      - products
  /api/v1/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product from the system
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a specific product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product update data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict with existing data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update product
      tags:
      - products
  /api/v1/products/{id}/inventory:
    get:
      consumes:
      - application/json
      description: Get inventory information for a specific product across all locations
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product inventory retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ProductInventoryResponse'
                  type: array
              type: object
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get product inventory
      tags:
      - products
  /api/v1/products/search:
    get:
      consumes:
      - application/json
      description: Search products by name, SKU, or other criteria
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Products found
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductListResponse'
              type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search products
      tags:
      - products
  /api/v1/suppliers:
    get:
      description: Get a paginated list of suppliers
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - description: Filter by active status
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Suppliers list
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/SupplierListResponse'
              type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List suppliers
      tags:
      - suppliers
    post:
      consumes:
      - application/json
      description: Create a new supplier in the system
      parameters:
      - description: Supplier creation data
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/SupplierCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Supplier created successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/SupplierDetailResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Supplier already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new supplier
      tags:
      - suppliers
  /api/v1/suppliers/{id}:
    delete:
      description: Delete a supplier from the system
      parameters:
      - description: Supplier ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Supplier deleted successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid supplier ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a supplier
      tags:
      - suppliers
    get:
      description: Get a specific supplier by its ID
      parameters:
      - description: Supplier ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Supplier details
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/SupplierDetailResponse'
              type: object
        "400":
          description: Invalid supplier ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get supplier by ID
      tags:
      - suppliers
    put:
      consumes:
      - application/json
      description: Update an existing supplier's information
      parameters:
      - description: Supplier ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Updated supplier data
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/SupplierUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Supplier updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/SupplierDetailResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Supplier code already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a supplier
      tags:
      - suppliers
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return login information
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Log out the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: User logout
      tags:
      - Authentication
  /categories:
    get:
      consumes:
      - application/json
      description: Get a paginated list of categories with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: page_size
        type: integer
      - description: Filter by category level (0-5)
        in: query
        name: level
        type: integer
      - description: Filter by parent category ID
        in: query
        name: parent_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create category
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category (must not have products or subcategories)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Get category details by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update category information
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update category
      tags:
      - categories
  /categories/{id}/children:
    get:
      consumes:
      - application/json
      description: Get all child categories of a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/CategoryResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category children
      tags:
      - categories
  /categories/{id}/hierarchy:
    get:
      consumes:
      - application/json
      description: Get the complete hierarchical tree of categories from a root category
      parameters:
      - description: Root category ID (optional, if not provided returns all root
          categories)
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryHierarchyResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category hierarchy
      tags:
      - categories
  /categories/{id}/move:
    put:
      consumes:
      - application/json
      description: Move a category to a different parent (or root level)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Move information
        in: body
        name: move
        required: true
        schema:
          $ref: '#/definitions/MoveCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Move category
      tags:
      - categories
  /categories/{id}/path:
    get:
      consumes:
      - application/json
      description: Get the path from root to the specified category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryPathResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category path
      tags:
      - categories
  /categories/hierarchy:
    get:
      consumes:
      - application/json
      description: Get the complete hierarchical tree of categories from a root category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryHierarchyResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category hierarchy
      tags:
      - categories
  /categories/roots:
    get:
      consumes:
      - application/json
      description: Get all root-level categories (categories with no parent)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/CategoryResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get root categories
      tags:
      - categories
  /health:
    get:
      description: Returns the health status of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.HealthResponse'
      summary: Health check
      tags:
      - System
  /users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by role
        enum:
        - admin
        - manager
        - staff
        - viewer
        in: query
        name: role
        type: string
      - description: Search by username or email
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a specific user by their ID
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: User update request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update a user
      tags:
      - Users
swagger: "2.0"
