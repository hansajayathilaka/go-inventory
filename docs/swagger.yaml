basePath: /api/v1
definitions:
  ApiResponse:
    description: Simple API response with success status, message and data
    properties:
      data: {}
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  CategoryHierarchyResponse:
    description: Hierarchical representation of categories
    properties:
      category:
        $ref: '#/definitions/CategoryResponse'
      children:
        items:
          $ref: '#/definitions/CategoryHierarchyResponse'
        type: array
    type: object
  CategoryListResponse:
    description: Paginated list of categories
    properties:
      categories:
        items:
          $ref: '#/definitions/CategoryResponse'
        type: array
      pagination:
        $ref: '#/definitions/PaginationResponse'
    type: object
  CategoryPathResponse:
    description: Category path from root to target category
    properties:
      path:
        items:
          $ref: '#/definitions/CategoryResponse'
        type: array
    type: object
  CategoryResponse:
    description: Category information in API responses
    properties:
      children_count:
        example: 5
        type: integer
      created_at:
        example: "2024-01-15T09:30:00Z"
        type: string
      description:
        example: Electronic devices and accessories
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      level:
        example: 1
        type: integer
      name:
        example: Electronics
        type: string
      parent_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      path:
        example: Electronics/Computers
        type: string
      updated_at:
        example: "2024-01-15T09:30:00Z"
        type: string
    type: object
  CreateCategoryRequest:
    description: Request payload for creating a new category
    properties:
      description:
        example: Electronic devices and accessories
        maxLength: 500
        type: string
      name:
        example: Electronics
        maxLength: 100
        minLength: 1
        type: string
      parent_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - name
    type: object
  ErrorResponse:
    description: Standard error API response structure
    properties:
      error:
        example: Invalid request
        type: string
      message:
        example: Detailed error message
        type: string
    type: object
  MoveCategoryRequest:
    description: Request payload for moving a category to a different parent
    properties:
      new_parent_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
    type: object
  PaginationResponse:
    description: Pagination information for list responses
    properties:
      page:
        example: 1
        type: integer
      page_size:
        example: 20
        type: integer
      total:
        example: 100
        type: integer
    type: object
  SuccessResponse:
    description: Standard successful API response structure
    properties:
      data: {}
      message:
        example: Operation completed successfully
        type: string
    type: object
  SupplierCreateRequest:
    description: Request body for creating a new supplier
    properties:
      address:
        example: 123 Business St, City, State 12345
        maxLength: 500
        type: string
      code:
        example: ACME001
        maxLength: 20
        minLength: 1
        type: string
      contact_name:
        example: John Smith
        maxLength: 100
        type: string
      email:
        example: contact@acme.com
        maxLength: 100
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: ACME Corporation
        maxLength: 100
        minLength: 1
        type: string
      notes:
        example: Primary supplier for widgets
        maxLength: 1000
        type: string
      phone:
        example: +1-555-123-4567
        maxLength: 20
        type: string
    required:
    - code
    - name
    type: object
  SupplierDetailResponse:
    description: Detailed supplier information returned by the API
    properties:
      address:
        example: 123 Business St, City, State 12345
        type: string
      code:
        example: ACME001
        type: string
      contact_name:
        example: John Smith
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      email:
        example: contact@acme.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: ACME Corporation
        type: string
      notes:
        example: Primary supplier for widgets
        type: string
      phone:
        example: +1-555-123-4567
        type: string
      updated_at:
        example: "2023-01-02T12:00:00Z"
        type: string
    type: object
  SupplierListResponse:
    description: Paginated list of suppliers with metadata
    properties:
      pagination:
        $ref: '#/definitions/PaginationResponse'
      suppliers:
        items:
          $ref: '#/definitions/SupplierDetailResponse'
        type: array
    type: object
  SupplierUpdateRequest:
    description: Request body for updating an existing supplier
    properties:
      address:
        example: 123 Business St, City, State 12345
        maxLength: 500
        type: string
      code:
        example: ACME001
        maxLength: 20
        minLength: 1
        type: string
      contact_name:
        example: John Smith
        maxLength: 100
        type: string
      email:
        example: contact@acme.com
        maxLength: 100
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: ACME Corporation
        maxLength: 100
        minLength: 1
        type: string
      notes:
        example: Primary supplier for widgets
        maxLength: 1000
        type: string
      phone:
        example: +1-555-123-4567
        maxLength: 20
        type: string
    required:
    - code
    - name
    type: object
  UpdateCategoryRequest:
    description: Request payload for updating an existing category
    properties:
      description:
        example: Electronic devices and accessories
        maxLength: 500
        type: string
      name:
        example: Electronics
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  audit.UserActivity:
    properties:
      log_count:
        type: integer
      user_id:
        type: string
      username:
        type: string
    type: object
  dto.ApproveRequest:
    properties:
      approver_id:
        example: 550e8400-e29b-41d4-a716-446655440003
        type: string
    required:
    - approver_id
    type: object
  dto.AuditLogResponse:
    properties:
      action:
        $ref: '#/definitions/models.AuditAction'
      audit_table:
        type: string
      id:
        type: string
      ip_address:
        type: string
      new_values: {}
      old_values: {}
      record_id:
        type: string
      timestamp:
        type: string
      user_agent:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  dto.AuditStatisticsResponse:
    properties:
      logs_by_action:
        additionalProperties:
          format: int64
          type: integer
        type: object
      logs_by_table:
        additionalProperties:
          format: int64
          type: integer
        type: object
      recent_activity:
        items:
          $ref: '#/definitions/dto.AuditLogResponse'
        type: array
      top_users:
        items:
          $ref: '#/definitions/audit.UserActivity'
        type: array
      total_logs:
        type: integer
    type: object
  dto.BaseResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.BrandResponse:
    properties:
      code:
        example: BOSCH
        type: string
      country_code:
        example: DE
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      description:
        example: German automotive parts manufacturer
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      logo_url:
        example: https://example.com/logos/bosch.png
        type: string
      name:
        example: Bosch
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      website:
        example: https://www.bosch.com
        type: string
    type: object
  dto.BulkCreateVehicleCompatibilityRequest:
    properties:
      compatibilities:
        items:
          $ref: '#/definitions/dto.CreateVehicleCompatibilityRequest'
        minItems: 1
        type: array
    required:
    - compatibilities
    type: object
  dto.BulkVehicleCompatibilityRequest:
    properties:
      ids:
        example:
        - '["550e8400-e29b-41d4-a716-446655440001"'
        - '"550e8400-e29b-41d4-a716-446655440002"]'
        items:
          type: string
        minItems: 1
        type: array
    required:
    - ids
    type: object
  dto.CategoryStockSummary:
    properties:
      category_id:
        type: string
      category_name:
        type: string
      total_items:
        type: integer
      total_value:
        type: number
    type: object
  dto.CreateBrandRequest:
    properties:
      code:
        example: BOSCH
        maxLength: 20
        type: string
      country_code:
        example: DE
        maxLength: 10
        type: string
      description:
        example: German automotive parts manufacturer
        maxLength: 500
        type: string
      logo_url:
        example: https://example.com/logos/bosch.png
        maxLength: 500
        type: string
      name:
        example: Bosch
        maxLength: 100
        minLength: 1
        type: string
      website:
        example: https://www.bosch.com
        maxLength: 200
        type: string
    required:
    - name
    type: object
  dto.CreateCustomerRequest:
    properties:
      address:
        example: 123 Main Street
        maxLength: 500
        type: string
      city:
        example: Kuala Lumpur
        maxLength: 100
        type: string
      code:
        example: JOH001
        maxLength: 20
        type: string
      country:
        example: Malaysia
        maxLength: 100
        type: string
      credit_limit:
        example: 10000
        minimum: 0
        type: number
      email:
        example: john@example.com
        maxLength: 100
        type: string
      name:
        example: John Doe
        maxLength: 100
        minLength: 1
        type: string
      notes:
        example: Regular customer
        maxLength: 1000
        type: string
      phone:
        example: "+60123456789"
        maxLength: 20
        type: string
      postal_code:
        example: "50000"
        maxLength: 20
        type: string
      state:
        example: Selangor
        maxLength: 100
        type: string
      tax_number:
        example: TAX123456
        maxLength: 50
        type: string
    required:
    - name
    type: object
  dto.CreateGRNItemRequest:
    properties:
      accepted_quantity:
        example: 9
        minimum: 0
        type: integer
      batch_number:
        example: BATCH001
        maxLength: 100
        type: string
      damaged_quantity:
        example: 1
        minimum: 0
        type: integer
      expiry_date:
        example: "2025-12-31T23:59:59Z"
        type: string
      purchase_order_item_id:
        example: 550e8400-e29b-41d4-a716-446655440007
        type: string
      quality_notes:
        example: One unit damaged during transport
        maxLength: 500
        type: string
      quality_status:
        example: good
        maxLength: 20
        type: string
      received_quantity:
        example: 10
        minimum: 0
        type: integer
      rejected_quantity:
        example: 0
        minimum: 0
        type: integer
      serial_numbers:
        example: '["SN001","SN002"]'
        maxLength: 2000
        type: string
      unit_price:
        example: 100
        minimum: 0
        type: number
    required:
    - accepted_quantity
    - purchase_order_item_id
    - received_quantity
    - unit_price
    type: object
  dto.CreateGRNRequest:
    properties:
      currency:
        example: MYR
        type: string
      delivery_note:
        example: DN-001
        maxLength: 100
        type: string
      discount_amount:
        example: 0
        minimum: 0
        type: number
      driver_name:
        example: John Doe
        maxLength: 100
        type: string
      invoice_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      invoice_number:
        example: INV-001
        maxLength: 100
        type: string
      items:
        items:
          $ref: '#/definitions/dto.CreateGRNItemRequest'
        type: array
      notes:
        example: All items received in good condition
        maxLength: 1000
        type: string
      purchase_order_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      quality_check:
        example: true
        type: boolean
      quality_notes:
        example: All items in good condition
        maxLength: 1000
        type: string
      received_by_id:
        example: 550e8400-e29b-41d4-a716-446655440004
        type: string
      received_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      tax_rate:
        example: 6
        maximum: 100
        minimum: 0
        type: number
      vehicle_number:
        example: ABC1234
        maxLength: 50
        type: string
    required:
    - purchase_order_id
    - received_by_id
    - received_date
    type: object
  dto.CreateInventoryRequest:
    properties:
      product_id:
        type: string
      quantity:
        minimum: 0
        type: integer
      reorder_level:
        minimum: 0
        type: integer
      reserved_quantity:
        minimum: 0
        type: integer
    required:
    - product_id
    - quantity
    - reorder_level
    type: object
  dto.CreatePurchaseOrderItemRequest:
    properties:
      discount_amount:
        example: 0
        minimum: 0
        type: number
      notes:
        example: High priority item
        maxLength: 500
        type: string
      product_id:
        example: 550e8400-e29b-41d4-a716-446655440005
        type: string
      quantity:
        example: 10
        minimum: 1
        type: integer
      unit_price:
        example: 100
        minimum: 0
        type: number
    required:
    - product_id
    - quantity
    - unit_price
    type: object
  dto.CreatePurchaseOrderRequest:
    properties:
      currency:
        example: MYR
        type: string
      discount_amount:
        example: 0
        minimum: 0
        type: number
      expected_date:
        example: "2023-01-15T12:00:00Z"
        type: string
      items:
        items:
          $ref: '#/definitions/dto.CreatePurchaseOrderItemRequest'
        type: array
      notes:
        example: Urgent order
        maxLength: 1000
        type: string
      order_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      reference:
        example: REF-001
        maxLength: 100
        type: string
      shipping_cost:
        example: 50
        minimum: 0
        type: number
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      tax_rate:
        example: 6
        maximum: 100
        minimum: 0
        type: number
      terms:
        example: Net 30 days
        maxLength: 1000
        type: string
    required:
    - order_date
    - supplier_id
    type: object
  dto.CreatePurchaseReceiptItemRequest:
    properties:
      discount_amount:
        example: 0
        minimum: 0
        type: number
      order_notes:
        example: High priority item
        maxLength: 500
        type: string
      ordered_quantity:
        example: 10
        minimum: 1
        type: integer
      product_id:
        example: 550e8400-e29b-41d4-a716-446655440005
        type: string
      unit_price:
        example: 100
        minimum: 0
        type: number
    required:
    - ordered_quantity
    - product_id
    - unit_price
    type: object
  dto.CreatePurchaseReceiptRequest:
    properties:
      currency:
        example: MYR
        type: string
      discount_amount:
        example: 0
        minimum: 0
        type: number
      expected_date:
        example: "2023-01-15T12:00:00Z"
        type: string
      items:
        items:
          $ref: '#/definitions/dto.CreatePurchaseReceiptItemRequest'
        type: array
      order_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      order_notes:
        example: Urgent order
        maxLength: 1000
        type: string
      reference:
        example: REF-001
        maxLength: 100
        type: string
      shipping_cost:
        example: 50
        minimum: 0
        type: number
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      tax_rate:
        example: 6
        maximum: 100
        minimum: 0
        type: number
      terms:
        example: Net 30 days
        maxLength: 1000
        type: string
    required:
    - order_date
    - supplier_id
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - manager
        - staff
        - viewer
        example: manager
        type: string
      username:
        example: john_doe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  dto.CreateVehicleBrandRequest:
    properties:
      code:
        example: TOYT
        maxLength: 20
        type: string
      country_code:
        example: JP
        maxLength: 10
        type: string
      description:
        example: Japanese automotive manufacturer
        maxLength: 500
        type: string
      logo_url:
        example: https://example.com/logos/toyota.png
        maxLength: 500
        type: string
      name:
        example: Toyota
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  dto.CreateVehicleCompatibilityRequest:
    properties:
      notes:
        example: Compatible with all trim levels
        maxLength: 500
        type: string
      product_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      vehicle_model_id:
        example: 550e8400-e29b-41d4-a716-446655440003
        type: string
      year_from:
        example: 2018
        maximum: 2100
        minimum: 1900
        type: integer
      year_to:
        example: 2023
        maximum: 2100
        minimum: 1900
        type: integer
    required:
    - product_id
    - vehicle_model_id
    type: object
  dto.CreateVehicleModelRequest:
    properties:
      code:
        example: TOYT-CAMR01
        maxLength: 50
        type: string
      description:
        example: Mid-size sedan
        maxLength: 500
        type: string
      engine_size:
        example: 2.5L
        maxLength: 20
        type: string
      fuel_type:
        example: PETROL
        maxLength: 20
        type: string
      name:
        example: Camry
        maxLength: 100
        minLength: 1
        type: string
      transmission:
        example: AUTOMATIC
        maxLength: 20
        type: string
      vehicle_brand_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      year_from:
        example: 2020
        maximum: 2099
        minimum: 1900
        type: integer
      year_to:
        example: 2024
        maximum: 2099
        minimum: 1900
        type: integer
    required:
    - name
    - vehicle_brand_id
    - year_from
    type: object
  dto.CustomerResponse:
    properties:
      address:
        example: 123 Main Street
        type: string
      city:
        example: Kuala Lumpur
        type: string
      code:
        example: JOH001
        type: string
      country:
        example: Malaysia
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      credit_limit:
        example: 10000
        type: number
      email:
        example: john@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: John Doe
        type: string
      notes:
        example: Regular customer
        type: string
      phone:
        example: "+60123456789"
        type: string
      postal_code:
        example: "50000"
        type: string
      state:
        example: Selangor
        type: string
      tax_number:
        example: TAX123456
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.ErrorInfo:
    properties:
      code:
        example: VALIDATION_ERROR
        type: string
      details:
        example: Name field is required
        type: string
      message:
        example: Invalid input parameters
        type: string
    type: object
  dto.GRNItemResponse:
    properties:
      accepted_quantity:
        example: 9
        type: integer
      batch_number:
        example: BATCH001
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      damaged_quantity:
        example: 1
        type: integer
      expiry_date:
        example: "2025-12-31T23:59:59Z"
        type: string
      grn_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440006
        type: string
      ordered_quantity:
        example: 10
        type: integer
      product_id:
        example: 550e8400-e29b-41d4-a716-446655440008
        type: string
      purchase_order_item_id:
        example: 550e8400-e29b-41d4-a716-446655440007
        type: string
      quality_notes:
        example: One unit damaged during transport
        type: string
      quality_status:
        example: good
        type: string
      received_quantity:
        example: 10
        type: integer
      rejected_quantity:
        example: 0
        type: integer
      serial_numbers:
        example: '["SN001","SN002"]'
        type: string
      stock_updated:
        example: false
        type: boolean
      total_price:
        example: 900
        type: number
      unit_price:
        example: 100
        type: number
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.GRNResponse:
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      currency:
        example: MYR
        type: string
      delivery_note:
        example: DN-001
        type: string
      discount_amount:
        example: 0
        type: number
      driver_name:
        example: John Doe
        type: string
      grn_number:
        example: GRN-2024-001
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      invoice_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      invoice_number:
        example: INV-001
        type: string
      items:
        items:
          $ref: '#/definitions/dto.GRNItemResponse'
        type: array
      notes:
        example: All items received in good condition
        type: string
      purchase_order_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      quality_check:
        example: true
        type: boolean
      quality_notes:
        example: All items in good condition
        type: string
      received_by_id:
        example: 550e8400-e29b-41d4-a716-446655440004
        type: string
      received_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.GRNStatus'
        example: draft
      sub_total:
        example: 1000
        type: number
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      tax_amount:
        example: 60
        type: number
      tax_rate:
        example: 6
        type: number
      total_amount:
        example: 1060
        type: number
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      vehicle_number:
        example: ABC1234
        type: string
      verified_at:
        example: "2023-01-02T12:00:00Z"
        type: string
      verified_by_id:
        example: 550e8400-e29b-41d4-a716-446655440005
        type: string
    type: object
  dto.InventoryResponse:
    properties:
      id:
        type: string
      last_updated:
        type: string
      product_barcode:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
      quantity:
        type: integer
      reorder_level:
        type: integer
      reserved_quantity:
        type: integer
    type: object
  dto.InventorySummaryItem:
    properties:
      category:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
      reorder_level:
        type: integer
      stock_value:
        type: number
      total_stock:
        type: integer
    type: object
  dto.InventorySummaryResponse:
    properties:
      low_stock_items:
        items:
          $ref: '#/definitions/dto.InventorySummaryItem'
        type: array
      stock_by_category:
        items:
          $ref: '#/definitions/dto.CategoryStockSummary'
        type: array
      top_products:
        items:
          $ref: '#/definitions/dto.InventorySummaryItem'
        type: array
      total_products:
        type: integer
      total_stock_value:
        type: number
      zero_stock_items:
        items:
          $ref: '#/definitions/dto.InventorySummaryItem'
        type: array
    type: object
  dto.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      expires_at:
        example: "2023-01-02T12:00:00Z"
        type: string
      refresh_token:
        example: refresh_token_here
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.LowStockItemResponse:
    properties:
      deficit:
        type: integer
      product_barcode:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
      quantity:
        type: integer
      reorder_level:
        type: integer
    type: object
  dto.POSLookupResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.POSProduct'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.POSProduct:
    properties:
      barcode:
        type: string
      cost_price:
        type: number
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      quantity:
        type: integer
      quick_sale:
        type: boolean
      retail_price:
        type: number
      sku:
        type: string
      tax_category:
        type: string
    type: object
  dto.PaginatedResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: Operation completed successfully
        type: string
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
      success:
        example: true
        type: boolean
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.PaginationInfo:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 10
        type: integer
    type: object
  dto.ProcessGRNRequest:
    properties:
      received_by_id:
        example: 550e8400-e29b-41d4-a716-446655440004
        type: string
    required:
    - received_by_id
    type: object
  dto.ProductCreateRequest:
    properties:
      barcode:
        example: "1234567890123"
        type: string
      brand_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      category_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      cost_price:
        example: 10.5
        type: number
      description:
        example: A sample product for demonstration
        type: string
      dimensions:
        example: 10x5x2 cm
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Sample Product
        type: string
      retail_price:
        example: 15.99
        type: number
      sku:
        example: PROD-001
        type: string
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      weight:
        example: 0.5
        type: number
      wholesale_price:
        example: 12.5
        type: number
    required:
    - category_id
    - name
    - sku
    type: object
  dto.ProductInventoryResponse:
    properties:
      available_quantity:
        example: 45
        type: integer
      max_level:
        example: 100
        type: integer
      quantity:
        example: 50
        type: integer
      reorder_level:
        example: 10
        type: integer
      reserved_quantity:
        example: 5
        type: integer
    type: object
  dto.ProductListResponse:
    properties:
      page:
        example: 1
        type: integer
      per_page:
        example: 20
        type: integer
      products:
        items:
          $ref: '#/definitions/dto.ProductResponse'
        type: array
      total:
        example: 150
        type: integer
      total_pages:
        example: 8
        type: integer
    type: object
  dto.ProductResponse:
    properties:
      barcode:
        example: "1234567890123"
        type: string
      brand:
        $ref: '#/definitions/dto.BrandResponse'
      brand_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      category:
        $ref: '#/definitions/CategoryResponse'
      category_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      cost_price:
        example: 10.5
        type: number
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: A sample product for demonstration
        type: string
      dimensions:
        example: 10x5x2 cm
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      inventory:
        items:
          $ref: '#/definitions/dto.ProductInventoryResponse'
        type: array
      is_active:
        example: true
        type: boolean
      name:
        example: Sample Product
        type: string
      retail_price:
        example: 15.99
        type: number
      sku:
        example: PROD-001
        type: string
      supplier:
        $ref: '#/definitions/dto.SupplierResponse'
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      total_stock:
        example: 100
        type: integer
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      weight:
        example: 0.5
        type: number
      wholesale_price:
        example: 12.5
        type: number
    type: object
  dto.ProductUpdateRequest:
    properties:
      barcode:
        example: "1234567890124"
        type: string
      brand_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      category_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      cost_price:
        example: 11
        type: number
      description:
        example: Updated description
        type: string
      dimensions:
        example: 11x5x2 cm
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Updated Product Name
        type: string
      retail_price:
        example: 16.99
        type: number
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      weight:
        example: 0.6
        type: number
      wholesale_price:
        example: 13.5
        type: number
    type: object
  dto.PurchaseOrderItemResponse:
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      discount_amount:
        example: 0
        type: number
      id:
        example: 550e8400-e29b-41d4-a716-446655440004
        type: string
      notes:
        example: High priority item
        type: string
      product_id:
        example: 550e8400-e29b-41d4-a716-446655440005
        type: string
      purchase_order_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      quantity:
        example: 10
        type: integer
      received_quantity:
        example: 0
        type: integer
      tax_amount:
        example: 60
        type: number
      total_price:
        example: 1000
        type: number
      unit_price:
        example: 100
        type: number
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.PurchaseOrderResponse:
    properties:
      approved_at:
        example: "2023-01-02T12:00:00Z"
        type: string
      approved_by_id:
        example: 550e8400-e29b-41d4-a716-446655440003
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      created_by_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      currency:
        example: MYR
        type: string
      delivery_date:
        example: "2023-01-14T12:00:00Z"
        type: string
      discount_amount:
        example: 0
        type: number
      expected_date:
        example: "2023-01-15T12:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      items:
        items:
          $ref: '#/definitions/dto.PurchaseOrderItemResponse'
        type: array
      notes:
        example: Urgent order
        type: string
      order_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      po_number:
        example: PO-2024-001
        type: string
      reference:
        example: REF-001
        type: string
      shipping_cost:
        example: 50
        type: number
      status:
        allOf:
        - $ref: '#/definitions/models.PurchaseOrderStatus'
        example: draft
      sub_total:
        example: 1000
        type: number
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      tax_amount:
        example: 60
        type: number
      tax_rate:
        example: 6
        type: number
      terms:
        example: Net 30 days
        type: string
      total_amount:
        example: 1110
        type: number
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.PurchaseReceiptItemResponse:
    properties:
      accepted_quantity:
        example: 9
        type: integer
      batch_number:
        example: BATCH001
        type: string
      created_at:
        description: Timestamps
        example: "2023-01-01T12:00:00Z"
        type: string
      damaged_quantity:
        example: 1
        type: integer
      discount_amount:
        example: 0
        type: number
      expiry_date:
        example: "2025-12-31T23:59:59Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440004
        type: string
      order_notes:
        example: High priority item
        type: string
      ordered_quantity:
        description: Order Information
        example: 10
        type: integer
      product_id:
        example: 550e8400-e29b-41d4-a716-446655440005
        type: string
      purchase_receipt_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      quality_notes:
        example: One unit damaged during transport
        type: string
      quality_status:
        example: good
        type: string
      receipt_notes:
        example: Inspection notes
        type: string
      received_quantity:
        description: Receipt Information
        example: 10
        type: integer
      rejected_quantity:
        example: 0
        type: integer
      serial_numbers:
        example: '["SN001","SN002"]'
        type: string
      stock_updated:
        example: false
        type: boolean
      tax_amount:
        example: 60
        type: number
      total_price:
        example: 1000
        type: number
      unit_price:
        example: 100
        type: number
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.PurchaseReceiptResponse:
    properties:
      approved_at:
        example: "2023-01-02T12:00:00Z"
        type: string
      approved_by_id:
        example: 550e8400-e29b-41d4-a716-446655440003
        type: string
      created_at:
        description: Timestamps
        example: "2023-01-01T12:00:00Z"
        type: string
      created_by_id:
        description: User Tracking
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      currency:
        example: MYR
        type: string
      delivery_date:
        example: "2023-01-14T08:00:00Z"
        type: string
      delivery_note:
        example: DN-001
        type: string
      discount_amount:
        example: 0
        type: number
      driver_name:
        example: John Doe
        type: string
      expected_date:
        example: "2023-01-15T12:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      invoice_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      invoice_number:
        example: INV-001
        type: string
      items:
        description: Items
        items:
          $ref: '#/definitions/dto.PurchaseReceiptItemResponse'
        type: array
      order_date:
        description: Order Information
        example: "2023-01-01T12:00:00Z"
        type: string
      order_notes:
        example: Urgent order
        type: string
      quality_check:
        example: true
        type: boolean
      quality_notes:
        example: All items in good condition
        type: string
      receipt_notes:
        example: All items received in good condition
        type: string
      receipt_number:
        example: PR-2024-001
        type: string
      received_by_id:
        example: 550e8400-e29b-41d4-a716-446655440004
        type: string
      received_date:
        description: Receipt Information
        example: "2023-01-14T12:00:00Z"
        type: string
      reference:
        example: REF-001
        type: string
      shipping_cost:
        example: 50
        type: number
      status:
        allOf:
        - $ref: '#/definitions/models.PurchaseReceiptStatus'
        example: draft
      sub_total:
        description: Financial Information
        example: 1000
        type: number
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      tax_amount:
        example: 60
        type: number
      tax_rate:
        example: 6
        type: number
      terms:
        example: Net 30 days
        type: string
      total_amount:
        example: 1110
        type: number
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      vehicle_number:
        example: ABC1234
        type: string
      verified_at:
        example: "2023-01-02T15:00:00Z"
        type: string
      verified_by_id:
        example: 550e8400-e29b-41d4-a716-446655440005
        type: string
    type: object
  dto.ReceiveGoodsRequest:
    properties:
      delivery_date:
        example: "2023-01-14T08:00:00Z"
        type: string
      delivery_note:
        example: DN-001
        maxLength: 100
        type: string
      driver_name:
        example: John Doe
        maxLength: 100
        type: string
      invoice_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      invoice_number:
        example: INV-001
        maxLength: 100
        type: string
      receipt_notes:
        example: All items received
        maxLength: 1000
        type: string
      received_by_id:
        example: 550e8400-e29b-41d4-a716-446655440004
        type: string
      received_date:
        example: "2023-01-14T12:00:00Z"
        type: string
      vehicle_number:
        example: ABC1234
        maxLength: 50
        type: string
    required:
    - received_by_id
    - received_date
    type: object
  dto.ReorderLevelUpdate:
    properties:
      product_id:
        type: string
      reorder_level:
        minimum: 0
        type: integer
    required:
    - product_id
    - reorder_level
    type: object
  dto.SendOrderRequest:
    properties:
      send_date:
        example: "2023-01-02T09:00:00Z"
        type: string
    required:
    - send_date
    type: object
  dto.StockAdjustmentRequest:
    properties:
      movement_type:
        enum:
        - IN
        - OUT
        - ADJUSTMENT
        type: string
      notes:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      reason:
        enum:
        - receiving
        - sale
        - sales
        - damage
        - corrections
        - correction
        - inventory_count
        - return
        - supplier_return
        - other
        type: string
    required:
    - movement_type
    - product_id
    - quantity
    - reason
    type: object
  dto.StockMovementResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      movement_type:
        type: string
      notes:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
      quantity:
        type: integer
      reference_id:
        type: string
      user_id:
        type: string
    type: object
  dto.SupplierResponse:
    properties:
      code:
        example: SUP-001
        type: string
      email:
        example: supplier@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Supplier Name
        type: string
      phone:
        example: +1-555-0123
        type: string
    type: object
  dto.UpdateBrandRequest:
    properties:
      code:
        example: BOSCH2
        maxLength: 20
        type: string
      country_code:
        example: DE
        maxLength: 10
        type: string
      description:
        example: Updated description
        maxLength: 500
        type: string
      is_active:
        example: true
        type: boolean
      logo_url:
        example: https://example.com/logos/bosch-new.png
        maxLength: 500
        type: string
      name:
        example: Bosch Updated
        maxLength: 100
        minLength: 1
        type: string
      website:
        example: https://www.bosch-updated.com
        maxLength: 200
        type: string
    type: object
  dto.UpdateCustomerRequest:
    properties:
      address:
        example: 456 Updated Street
        maxLength: 500
        type: string
      city:
        example: Kuala Lumpur
        maxLength: 100
        type: string
      code:
        example: JOH002
        maxLength: 20
        type: string
      country:
        example: Malaysia
        maxLength: 100
        type: string
      credit_limit:
        example: 15000
        minimum: 0
        type: number
      email:
        example: john.updated@example.com
        maxLength: 100
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: John Doe Updated
        maxLength: 100
        minLength: 1
        type: string
      notes:
        example: Updated notes
        maxLength: 1000
        type: string
      phone:
        example: "+60123456789"
        maxLength: 20
        type: string
      postal_code:
        example: "50000"
        maxLength: 20
        type: string
      state:
        example: Selangor
        maxLength: 100
        type: string
      tax_number:
        example: TAX123456
        maxLength: 50
        type: string
    type: object
  dto.UpdateGRNItemRequest:
    properties:
      accepted_quantity:
        example: 9
        minimum: 0
        type: integer
      batch_number:
        example: BATCH001
        maxLength: 100
        type: string
      damaged_quantity:
        example: 1
        minimum: 0
        type: integer
      expiry_date:
        example: "2025-12-31T23:59:59Z"
        type: string
      quality_notes:
        example: Updated quality notes
        maxLength: 500
        type: string
      quality_status:
        example: good
        maxLength: 20
        type: string
      received_quantity:
        example: 10
        minimum: 0
        type: integer
      rejected_quantity:
        example: 0
        minimum: 0
        type: integer
      serial_numbers:
        example: '["SN001","SN002"]'
        maxLength: 2000
        type: string
      unit_price:
        example: 100
        minimum: 0
        type: number
    type: object
  dto.UpdateGRNRequest:
    properties:
      currency:
        example: MYR
        type: string
      delivery_note:
        example: DN-001
        maxLength: 100
        type: string
      discount_amount:
        example: 0
        minimum: 0
        type: number
      driver_name:
        example: John Doe
        maxLength: 100
        type: string
      invoice_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      invoice_number:
        example: INV-001
        maxLength: 100
        type: string
      notes:
        example: Updated notes
        maxLength: 1000
        type: string
      quality_check:
        example: true
        type: boolean
      quality_notes:
        example: All items in good condition
        maxLength: 1000
        type: string
      received_by_id:
        example: 550e8400-e29b-41d4-a716-446655440004
        type: string
      received_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      tax_rate:
        example: 6
        maximum: 100
        minimum: 0
        type: number
      vehicle_number:
        example: ABC1234
        maxLength: 50
        type: string
    type: object
  dto.UpdatePurchaseOrderItemRequest:
    properties:
      discount_amount:
        example: 5
        minimum: 0
        type: number
      notes:
        example: Updated notes
        maxLength: 500
        type: string
      quantity:
        example: 15
        minimum: 1
        type: integer
      unit_price:
        example: 120
        minimum: 0
        type: number
    type: object
  dto.UpdatePurchaseOrderRequest:
    properties:
      currency:
        example: MYR
        type: string
      delivery_date:
        example: "2023-01-14T12:00:00Z"
        type: string
      discount_amount:
        example: 0
        minimum: 0
        type: number
      expected_date:
        example: "2023-01-15T12:00:00Z"
        type: string
      notes:
        example: Updated notes
        maxLength: 1000
        type: string
      order_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      reference:
        example: Updated reference
        maxLength: 100
        type: string
      shipping_cost:
        example: 50
        minimum: 0
        type: number
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      tax_rate:
        example: 6
        maximum: 100
        minimum: 0
        type: number
      terms:
        example: Updated terms
        maxLength: 1000
        type: string
    type: object
  dto.UpdatePurchaseReceiptItemRequest:
    properties:
      accepted_quantity:
        example: 9
        minimum: 0
        type: integer
      batch_number:
        example: BATCH001
        maxLength: 100
        type: string
      damaged_quantity:
        example: 1
        minimum: 0
        type: integer
      discount_amount:
        example: 5
        minimum: 0
        type: number
      expiry_date:
        example: "2025-12-31T23:59:59Z"
        type: string
      order_notes:
        example: Updated notes
        maxLength: 500
        type: string
      ordered_quantity:
        description: Order Information Updates
        example: 15
        minimum: 1
        type: integer
      quality_notes:
        example: Updated quality notes
        maxLength: 500
        type: string
      quality_status:
        example: good
        maxLength: 20
        type: string
      receipt_notes:
        example: Updated receipt notes
        maxLength: 500
        type: string
      received_quantity:
        description: Receipt Information Updates
        example: 10
        minimum: 0
        type: integer
      rejected_quantity:
        example: 0
        minimum: 0
        type: integer
      serial_numbers:
        example: '["SN001","SN002"]'
        maxLength: 2000
        type: string
      unit_price:
        example: 120
        minimum: 0
        type: number
    type: object
  dto.UpdatePurchaseReceiptRequest:
    properties:
      currency:
        example: MYR
        type: string
      delivery_date:
        example: "2023-01-14T08:00:00Z"
        type: string
      delivery_note:
        example: DN-001
        maxLength: 100
        type: string
      discount_amount:
        example: 0
        minimum: 0
        type: number
      driver_name:
        example: John Doe
        maxLength: 100
        type: string
      expected_date:
        example: "2023-01-15T12:00:00Z"
        type: string
      invoice_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      invoice_number:
        example: INV-001
        maxLength: 100
        type: string
      order_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      order_notes:
        example: Updated notes
        maxLength: 1000
        type: string
      quality_check:
        example: true
        type: boolean
      quality_notes:
        example: All items in good condition
        maxLength: 1000
        type: string
      receipt_notes:
        example: All items received in good condition
        maxLength: 1000
        type: string
      received_date:
        description: Receipt Information (for receipt phase updates)
        example: "2023-01-14T12:00:00Z"
        type: string
      reference:
        example: REF-001
        maxLength: 100
        type: string
      shipping_cost:
        example: 50
        minimum: 0
        type: number
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      tax_rate:
        example: 6
        maximum: 100
        minimum: 0
        type: number
      terms:
        example: Updated terms
        maxLength: 1000
        type: string
      vehicle_number:
        example: ABC1234
        maxLength: 50
        type: string
    type: object
  dto.UpdateReorderLevelsRequest:
    properties:
      reorder_levels:
        items:
          $ref: '#/definitions/dto.ReorderLevelUpdate'
        minItems: 1
        type: array
    required:
    - reorder_levels
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        example: john_updated@example.com
        type: string
      role:
        enum:
        - admin
        - manager
        - staff
        - viewer
        example: staff
        type: string
      username:
        example: john_doe_updated
        maxLength: 50
        minLength: 3
        type: string
    type: object
  dto.UpdateVehicleBrandRequest:
    properties:
      code:
        example: TOYT2
        maxLength: 20
        type: string
      country_code:
        example: JP
        maxLength: 10
        type: string
      description:
        example: Updated description
        maxLength: 500
        type: string
      is_active:
        example: true
        type: boolean
      logo_url:
        example: https://example.com/logos/toyota-new.png
        maxLength: 500
        type: string
      name:
        example: Toyota Updated
        maxLength: 100
        minLength: 1
        type: string
    type: object
  dto.UpdateVehicleCompatibilityRequest:
    properties:
      is_active:
        example: true
        type: boolean
      is_verified:
        example: true
        type: boolean
      notes:
        example: Updated compatibility notes
        maxLength: 500
        type: string
      product_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      vehicle_model_id:
        example: 550e8400-e29b-41d4-a716-446655440003
        type: string
      year_from:
        example: 2019
        maximum: 2100
        minimum: 1900
        type: integer
      year_to:
        example: 2024
        maximum: 2100
        minimum: 1900
        type: integer
    type: object
  dto.UpdateVehicleModelRequest:
    properties:
      code:
        example: TOYT-CAMR02
        maxLength: 50
        type: string
      description:
        example: Updated description
        maxLength: 500
        type: string
      engine_size:
        example: 2.0L
        maxLength: 20
        type: string
      fuel_type:
        example: HYBRID
        maxLength: 20
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Camry Updated
        maxLength: 100
        minLength: 1
        type: string
      transmission:
        example: CVT
        maxLength: 20
        type: string
      vehicle_brand_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      year_from:
        example: 2021
        maximum: 2099
        minimum: 1900
        type: integer
      year_to:
        example: 2025
        maximum: 2099
        minimum: 1900
        type: integer
    type: object
  dto.UserResponse:
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      last_login:
        example: "2023-01-01T12:00:00Z"
        type: string
      role:
        enum:
        - admin
        - manager
        - staff
        - viewer
        example: manager
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      username:
        example: john_doe
        type: string
    type: object
  dto.VehicleBrandResponse:
    properties:
      code:
        example: TOYT
        type: string
      country_code:
        example: JP
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      description:
        example: Japanese automotive manufacturer
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      logo_url:
        example: https://example.com/logos/toyota.png
        type: string
      name:
        example: Toyota
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.VehicleBrandWithModelsResponse:
    properties:
      code:
        example: TOYT
        type: string
      country_code:
        example: JP
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      description:
        example: Japanese automotive manufacturer
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      logo_url:
        example: https://example.com/logos/toyota.png
        type: string
      name:
        example: Toyota
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      vehicle_models:
        items:
          $ref: '#/definitions/dto.VehicleModelResponse'
        type: array
    type: object
  dto.VehicleCompatibilityDetailResponse:
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      is_active:
        example: true
        type: boolean
      is_verified:
        example: true
        type: boolean
      notes:
        example: Compatible with all trim levels
        type: string
      product:
        $ref: '#/definitions/dto.ProductResponse'
      product_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      vehicle_model:
        $ref: '#/definitions/dto.VehicleModelResponse'
      vehicle_model_id:
        example: 550e8400-e29b-41d4-a716-446655440003
        type: string
      year_from:
        example: 2018
        type: integer
      year_to:
        example: 2023
        type: integer
    type: object
  dto.VehicleCompatibilityResponse:
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      is_active:
        example: true
        type: boolean
      is_verified:
        example: true
        type: boolean
      notes:
        example: Compatible with all trim levels
        type: string
      product_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      vehicle_model_id:
        example: 550e8400-e29b-41d4-a716-446655440003
        type: string
      year_from:
        example: 2018
        type: integer
      year_to:
        example: 2023
        type: integer
    type: object
  dto.VehicleCompatibilityStatsResponse:
    properties:
      active:
        example: 1450
        type: integer
      total:
        example: 1500
        type: integer
      unverified:
        example: 250
        type: integer
      verified:
        example: 1200
        type: integer
    type: object
  dto.VehicleModelDetailResponse:
    properties:
      code:
        example: TOYT-CAMR01
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      description:
        example: Mid-size sedan
        type: string
      engine_size:
        example: 2.5L
        type: string
      fuel_type:
        example: PETROL
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Camry
        type: string
      transmission:
        example: AUTOMATIC
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      vehicle_brand:
        $ref: '#/definitions/dto.VehicleBrandResponse'
      vehicle_brand_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      year_from:
        example: 2020
        type: integer
      year_to:
        example: 2024
        type: integer
    type: object
  dto.VehicleModelResponse:
    properties:
      code:
        example: TOYT-CAMR01
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      description:
        example: Mid-size sedan
        type: string
      engine_size:
        example: 2.5L
        type: string
      fuel_type:
        example: PETROL
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Camry
        type: string
      transmission:
        example: AUTOMATIC
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      vehicle_brand_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      year_from:
        example: 2020
        type: integer
      year_to:
        example: 2024
        type: integer
    type: object
  dto.VerifyGRNRequest:
    properties:
      verifier_id:
        example: 550e8400-e29b-41d4-a716-446655440005
        type: string
    required:
    - verifier_id
    type: object
  dto.VerifyGoodsRequest:
    properties:
      quality_check:
        example: true
        type: boolean
      quality_notes:
        example: All items verified
        maxLength: 1000
        type: string
      verifier_id:
        example: 550e8400-e29b-41d4-a716-446655440005
        type: string
    required:
    - verifier_id
    type: object
  dto.ZeroStockItemResponse:
    properties:
      last_updated:
        type: string
      product_barcode:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
  handlers.LoginResponse:
    properties:
      expires_in:
        example: 86400
        type: integer
      token:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  models.AuditAction:
    enum:
    - CREATE
    - UPDATE
    - DELETE
    - LOGIN
    - LOGOUT
    type: string
    x-enum-varnames:
    - ActionCreate
    - ActionUpdate
    - ActionDelete
    - ActionLogin
    - ActionLogout
  models.GRNStatus:
    enum:
    - draft
    - received
    - partial
    - completed
    - cancelled
    type: string
    x-enum-varnames:
    - GRNStatusDraft
    - GRNStatusReceived
    - GRNStatusPartial
    - GRNStatusCompleted
    - GRNStatusCancelled
  models.PurchaseOrderStatus:
    enum:
    - draft
    - pending
    - approved
    - ordered
    - received
    - cancelled
    type: string
    x-enum-varnames:
    - PurchaseOrderStatusDraft
    - PurchaseOrderStatusPending
    - PurchaseOrderStatusApproved
    - PurchaseOrderStatusOrdered
    - PurchaseOrderStatusReceived
    - PurchaseOrderStatusCancelled
  models.PurchaseReceiptStatus:
    enum:
    - draft
    - pending
    - approved
    - ordered
    - received
    - partial
    - completed
    - cancelled
    type: string
    x-enum-comments:
      PurchaseReceiptStatusApproved: Approved, ready to send
      PurchaseReceiptStatusCancelled: Order cancelled
      PurchaseReceiptStatusCompleted: Fully received and processed
      PurchaseReceiptStatusDraft: Initial creation
      PurchaseReceiptStatusOrdered: Sent to supplier
      PurchaseReceiptStatusPartial: Partially received/processed
      PurchaseReceiptStatusPending: Awaiting approval
      PurchaseReceiptStatusReceived: Goods received, being processed
    x-enum-descriptions:
    - Initial creation
    - Awaiting approval
    - Approved, ready to send
    - Sent to supplier
    - Goods received, being processed
    - Partially received/processed
    - Fully received and processed
    - Order cancelled
    x-enum-varnames:
    - PurchaseReceiptStatusDraft
    - PurchaseReceiptStatusPending
    - PurchaseReceiptStatusApproved
    - PurchaseReceiptStatusOrdered
    - PurchaseReceiptStatusReceived
    - PurchaseReceiptStatusPartial
    - PurchaseReceiptStatusCompleted
    - PurchaseReceiptStatusCancelled
  router.HealthResponse:
    properties:
      status:
        example: ok
        type: string
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
host: localhost:9090
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A comprehensive vehicle spare parts shop management system with single-location
    inventory tracking, brand management, vehicle compatibility, unified purchase
    receipt processing, customer management, JWT authentication, and role-based access
    control. Features include product catalogs, vehicle-part compatibility, purchase
    order/goods receipt workflow, customer relationship management, audit trails,
    and role-based access control across the entire system.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Vehicle Spare Parts Shop Management API
  version: "1.0"
paths:
  /audit-logs:
    get:
      consumes:
      - application/json
      description: Get audit logs with optional filtering
      parameters:
      - description: Filter by table name
        in: query
        name: table
        type: string
      - description: Filter by record ID
        in: query
        name: record_id
        type: string
      - description: Filter by action (CREATE, UPDATE, DELETE, LOGIN, LOGOUT)
        in: query
        name: action
        type: string
      - description: Filter by user ID
        in: query
        name: user_id
        type: string
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      - default: 50
        description: Limit results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get audit logs
      tags:
      - audit
  /audit-logs/statistics:
    get:
      consumes:
      - application/json
      description: Get comprehensive audit statistics including activity summaries
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuditStatisticsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get audit statistics
      tags:
      - audit
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return login information
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Log out the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: User logout
      tags:
      - Authentication
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get current authenticated user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Get current user info
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate a new JWT token using current token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/handlers.LoginResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Refresh JWT token
      tags:
      - Authentication
  /brands:
    get:
      consumes:
      - application/json
      description: Get a paginated list of brands with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by name or code
        in: query
        name: search
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      - description: Filter by country code
        in: query
        name: country_code
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.BrandResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List brands
      tags:
      - Brands
    post:
      consumes:
      - application/json
      description: Create a new brand with the provided information
      parameters:
      - description: Brand creation request
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBrandRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new brand
      tags:
      - Brands
  /brands/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a brand by their ID (soft delete)
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Delete a brand
      tags:
      - Brands
    get:
      consumes:
      - application/json
      description: Get a specific brand by their ID
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get brand by ID
      tags:
      - Brands
    put:
      consumes:
      - application/json
      description: Update an existing brand's information
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Brand update request
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBrandRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update a brand
      tags:
      - Brands
  /brands/{id}/activate:
    post:
      consumes:
      - application/json
      description: Activate a deactivated brand
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Activate a brand
      tags:
      - Brands
  /brands/{id}/deactivate:
    post:
      consumes:
      - application/json
      description: Deactivate an active brand
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Deactivate a brand
      tags:
      - Brands
  /brands/active:
    get:
      consumes:
      - application/json
      description: Get all active brands
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.BrandResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List active brands
      tags:
      - Brands
  /brands/code/{code}:
    get:
      consumes:
      - application/json
      description: Get a specific brand by their code
      parameters:
      - description: Brand code
        example: '"BOSCH"'
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get brand by code
      tags:
      - Brands
  /brands/generate-code:
    get:
      consumes:
      - application/json
      description: Generate a unique brand code based on brand name
      parameters:
      - description: Brand name
        example: '"Bosch"'
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Generate brand code
      tags:
      - Brands
  /categories:
    get:
      consumes:
      - application/json
      description: Get a paginated list of categories with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: page_size
        type: integer
      - description: Filter by category level (0-5)
        in: query
        name: level
        type: integer
      - description: Filter by parent category ID
        in: query
        name: parent_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create category
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category (must not have products or subcategories)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Get category details by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update category information
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update category
      tags:
      - categories
  /categories/{id}/children:
    get:
      consumes:
      - application/json
      description: Get all child categories of a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/CategoryResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category children
      tags:
      - categories
  /categories/{id}/hierarchy:
    get:
      consumes:
      - application/json
      description: Get the complete hierarchical tree of categories from a root category
      parameters:
      - description: Root category ID (optional, if not provided returns all root
          categories)
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryHierarchyResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category hierarchy
      tags:
      - categories
  /categories/{id}/move:
    put:
      consumes:
      - application/json
      description: Move a category to a different parent (or root level)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Move information
        in: body
        name: move
        required: true
        schema:
          $ref: '#/definitions/MoveCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Move category
      tags:
      - categories
  /categories/{id}/path:
    get:
      consumes:
      - application/json
      description: Get the path from root to the specified category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryPathResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category path
      tags:
      - categories
  /categories/hierarchy:
    get:
      consumes:
      - application/json
      description: Get the complete hierarchical tree of categories from a root category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryHierarchyResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category hierarchy
      tags:
      - categories
  /categories/roots:
    get:
      consumes:
      - application/json
      description: Get all root-level categories (categories with no parent)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/CategoryResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get root categories
      tags:
      - categories
  /categories/search:
    get:
      consumes:
      - application/json
      description: Search categories by name or description
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search categories
      tags:
      - categories
  /customers:
    get:
      consumes:
      - application/json
      description: Get a paginated list of customers with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by name, code, or email
        in: query
        name: search
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      - description: Filter by city
        in: query
        name: city
        type: string
      - description: Filter by state
        in: query
        name: state
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.CustomerResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List customers
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Create a new customer with the provided information
      parameters:
      - description: Customer creation request
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new customer
      tags:
      - Customers
  /customers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a customer by their ID (soft delete)
      parameters:
      - description: Customer ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Delete a customer
      tags:
      - Customers
    get:
      consumes:
      - application/json
      description: Get a specific customer by their ID
      parameters:
      - description: Customer ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get customer by ID
      tags:
      - Customers
    put:
      consumes:
      - application/json
      description: Update an existing customer's information
      parameters:
      - description: Customer ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Customer update request
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update a customer
      tags:
      - Customers
  /customers/{id}/activate:
    post:
      consumes:
      - application/json
      description: Activate a deactivated customer
      parameters:
      - description: Customer ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Activate a customer
      tags:
      - Customers
  /customers/{id}/deactivate:
    post:
      consumes:
      - application/json
      description: Deactivate an active customer
      parameters:
      - description: Customer ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Deactivate a customer
      tags:
      - Customers
  /customers/active:
    get:
      consumes:
      - application/json
      description: Get all active customers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.CustomerResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List active customers
      tags:
      - Customers
  /customers/code/{code}:
    get:
      consumes:
      - application/json
      description: Get a specific customer by their code
      parameters:
      - description: Customer code
        example: '"JOH001"'
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get customer by code
      tags:
      - Customers
  /customers/generate-code:
    get:
      consumes:
      - application/json
      description: Generate a unique customer code based on customer name
      parameters:
      - description: Customer name
        example: '"John Doe"'
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Generate customer code
      tags:
      - Customers
  /grns:
    get:
      consumes:
      - application/json
      description: Get a paginated list of GRNs with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by GRN number or delivery note
        in: query
        name: search
        type: string
      - description: Filter by status
        enum:
        - draft
        - received
        - partial
        - completed
        - cancelled
        in: query
        name: status
        type: string
      - description: Filter by purchase order ID
        format: uuid
        in: query
        name: purchase_order_id
        type: string
      - description: Filter by supplier ID
        format: uuid
        in: query
        name: supplier_id
        type: string
      - description: Filter by start date
        format: date
        in: query
        name: start_date
        type: string
      - description: Filter by end date
        format: date
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.GRNResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: List GRNs
      tags:
      - GRNs
    post:
      consumes:
      - application/json
      description: Create a new Goods Received Note
      parameters:
      - description: GRN data
        in: body
        name: grn
        required: true
        schema:
          $ref: '#/definitions/dto.CreateGRNRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GRNResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Create a new GRN
      tags:
      - GRNs
  /grns/{grn_id}/items/{item_id}:
    delete:
      consumes:
      - application/json
      description: Remove an item from a GRN
      parameters:
      - description: GRN ID
        format: uuid
        in: path
        name: grn_id
        required: true
        type: string
      - description: GRN Item ID
        format: uuid
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Remove GRN item
      tags:
      - GRNs
    put:
      consumes:
      - application/json
      description: Update an existing GRN item
      parameters:
      - description: GRN ID
        format: uuid
        in: path
        name: grn_id
        required: true
        type: string
      - description: GRN Item ID
        format: uuid
        in: path
        name: item_id
        required: true
        type: string
      - description: Updated GRN item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateGRNItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GRNItemResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update GRN item
      tags:
      - GRNs
  /grns/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Goods Received Note
      parameters:
      - description: GRN ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Delete a GRN
      tags:
      - GRNs
    get:
      consumes:
      - application/json
      description: Get a specific GRN by its ID
      parameters:
      - description: GRN ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GRNResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get GRN by ID
      tags:
      - GRNs
    put:
      consumes:
      - application/json
      description: Update an existing Goods Received Note
      parameters:
      - description: GRN ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Updated GRN data
        in: body
        name: grn
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateGRNRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GRNResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update an existing GRN
      tags:
      - GRNs
  /grns/{id}/complete:
    post:
      consumes:
      - application/json
      description: Complete the GRN processing
      parameters:
      - description: GRN ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GRNResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Complete a GRN
      tags:
      - GRNs
  /grns/{id}/items:
    get:
      consumes:
      - application/json
      description: Get all items for a specific GRN
      parameters:
      - description: GRN ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.GRNItemResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get GRN items
      tags:
      - GRNs
    post:
      consumes:
      - application/json
      description: Add a new item to an existing GRN
      parameters:
      - description: GRN ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: GRN item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.CreateGRNItemRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GRNItemResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Add item to GRN
      tags:
      - GRNs
  /grns/{id}/process-receipt:
    post:
      consumes:
      - application/json
      description: Process the receipt of goods for a GRN
      parameters:
      - description: GRN ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Process receipt data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProcessGRNRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GRNResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Process GRN receipt
      tags:
      - GRNs
  /grns/{id}/verify:
    post:
      consumes:
      - application/json
      description: Verify the received goods in a GRN
      parameters:
      - description: GRN ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Verification data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyGRNRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GRNResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Verify a GRN
      tags:
      - GRNs
  /grns/number/{grn_number}:
    get:
      consumes:
      - application/json
      description: Get a specific GRN by its GRN number
      parameters:
      - description: GRN Number
        example: '"GRN-2024-001"'
        in: path
        name: grn_number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GRNResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get GRN by GRN number
      tags:
      - GRNs
  /health:
    get:
      description: Returns the health status of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.HealthResponse'
      summary: Health check
      tags:
      - System
  /inventory:
    get:
      consumes:
      - application/json
      description: Get a paginated list of inventory records with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by product ID
        in: query
        name: product_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.InventoryResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List inventory records
      tags:
      - inventory
    post:
      consumes:
      - application/json
      description: Create a new inventory record for a product
      parameters:
      - description: Inventory data
        in: body
        name: inventory
        required: true
        schema:
          $ref: '#/definitions/dto.CreateInventoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.InventoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create inventory record
      tags:
      - inventory
  /inventory/adjust:
    post:
      consumes:
      - application/json
      description: Adjust stock levels for a product (increase or decrease)
      parameters:
      - description: Stock adjustment data
        in: body
        name: adjustment
        required: true
        schema:
          $ref: '#/definitions/dto.StockAdjustmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.StockMovementResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Adjust stock levels
      tags:
      - inventory
  /inventory/low-stock:
    get:
      consumes:
      - application/json
      description: Get items that are at or below their reorder level
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.LowStockItemResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get low stock items
      tags:
      - inventory
  /inventory/reorder-levels:
    put:
      consumes:
      - application/json
      description: Update reorder levels for multiple inventory records
      parameters:
      - description: Reorder levels data
        in: body
        name: levels
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateReorderLevelsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update reorder levels
      tags:
      - inventory
  /inventory/zero-stock:
    get:
      consumes:
      - application/json
      description: Get items that are completely out of stock
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ZeroStockItemResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get zero stock items
      tags:
      - inventory
  /pos/lookup:
    get:
      consumes:
      - application/json
      description: Search products for POS by barcode, SKU, or name
      parameters:
      - description: Search query (barcode, SKU, or name)
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Products found
          schema:
            $ref: '#/definitions/dto.POSLookupResponse'
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: POS product lookup
      tags:
      - pos
  /products:
    get:
      consumes:
      - application/json
      description: Get a paginated list of products with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: per_page
        type: integer
      - description: Filter by category ID
        in: query
        name: category_id
        type: string
      - description: Filter by supplier ID
        in: query
        name: supplier_id
        type: string
      - description: Filter by brand ID
        in: query
        name: brand_id
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductListResponse'
              type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product in the system
      parameters:
      - description: Product creation data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Product already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product from the system
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a specific product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product update data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict with existing data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update product
      tags:
      - products
  /products/{id}/inventory:
    get:
      consumes:
      - application/json
      description: Get inventory information for a specific product across all locations
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product inventory retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ProductInventoryResponse'
                  type: array
              type: object
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get product inventory
      tags:
      - products
  /products/{product_id}/brand:
    delete:
      consumes:
      - application/json
      description: Remove brand assignment from a product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Brand removed successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove product brand
      tags:
      - products
  /products/{product_id}/brand/{brand_id}:
    put:
      consumes:
      - application/json
      description: Assign a brand to a product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      - description: Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Brand assigned successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid product or brand ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Product or brand not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set product brand
      tags:
      - products
  /products/brand/{brand_id}:
    get:
      consumes:
      - application/json
      description: Get all products for a specific brand
      parameters:
      - description: Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ProductResponse'
                  type: array
              type: object
        "400":
          description: Invalid brand ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Brand not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get products by brand
      tags:
      - products
  /products/no-brand:
    get:
      consumes:
      - application/json
      description: Get all products that do not have a brand assigned
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ProductResponse'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get products without brand
      tags:
      - products
  /products/pos-ready:
    get:
      consumes:
      - application/json
      description: Get all active products formatted for POS use
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: POS products
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.POSProduct'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get POS-ready products
      tags:
      - pos
  /products/search:
    get:
      consumes:
      - application/json
      description: Search products by name, SKU, or other criteria
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Products found
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductListResponse'
              type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search products
      tags:
      - products
  /purchase-orders:
    get:
      consumes:
      - application/json
      description: Get a paginated list of purchase orders with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by PO number or reference
        in: query
        name: search
        type: string
      - description: Filter by status
        enum:
        - draft
        - pending
        - approved
        - ordered
        - received
        - cancelled
        in: query
        name: status
        type: string
      - description: Filter by supplier ID
        format: uuid
        in: query
        name: supplier_id
        type: string
      - description: Filter by start date
        format: date
        in: query
        name: start_date
        type: string
      - description: Filter by end date
        format: date
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.PurchaseOrderResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: List purchase orders
      tags:
      - PurchaseOrders
    post:
      consumes:
      - application/json
      description: Create a new purchase order with items
      parameters:
      - description: Purchase order data
        in: body
        name: purchase_order
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePurchaseOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.PurchaseOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Create new purchase order
      tags:
      - PurchaseOrders
  /purchase-orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a purchase order (soft delete)
      parameters:
      - description: Purchase Order ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Delete purchase order
      tags:
      - PurchaseOrders
    get:
      consumes:
      - application/json
      description: Get a specific purchase order by its ID
      parameters:
      - description: Purchase Order ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.PurchaseOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get purchase order by ID
      tags:
      - PurchaseOrders
    put:
      consumes:
      - application/json
      description: Update an existing purchase order
      parameters:
      - description: Purchase Order ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Updated purchase order data
        in: body
        name: purchase_order
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePurchaseOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.PurchaseOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update purchase order
      tags:
      - PurchaseOrders
  /purchase-orders/{id}/approve:
    post:
      consumes:
      - application/json
      description: Approve a purchase order (changes status to approved)
      parameters:
      - description: Purchase Order ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.PurchaseOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Approve purchase order
      tags:
      - PurchaseOrders
  /purchase-orders/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel a purchase order (changes status to cancelled)
      parameters:
      - description: Purchase Order ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.PurchaseOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Cancel purchase order
      tags:
      - PurchaseOrders
  /purchase-orders/{id}/items:
    get:
      consumes:
      - application/json
      description: Get all items for a specific purchase order
      parameters:
      - description: Purchase Order ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.PurchaseOrderItemResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get purchase order items
      tags:
      - PurchaseOrders
    post:
      consumes:
      - application/json
      description: Add a new item to an existing purchase order
      parameters:
      - description: Purchase Order ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Purchase order item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePurchaseOrderItemRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.PurchaseOrderItemResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Add item to purchase order
      tags:
      - PurchaseOrders
  /purchase-orders/{id}/send:
    post:
      consumes:
      - application/json
      description: Send purchase order to supplier (changes status to ordered)
      parameters:
      - description: Purchase Order ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.PurchaseOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Send purchase order
      tags:
      - PurchaseOrders
  /purchase-orders/{po_id}/items/{item_id}:
    delete:
      consumes:
      - application/json
      description: Remove an item from a purchase order
      parameters:
      - description: Purchase Order ID
        format: uuid
        in: path
        name: po_id
        required: true
        type: string
      - description: Purchase Order Item ID
        format: uuid
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Remove item from purchase order
      tags:
      - PurchaseOrders
    put:
      consumes:
      - application/json
      description: Update an existing purchase order item
      parameters:
      - description: Purchase Order ID
        format: uuid
        in: path
        name: po_id
        required: true
        type: string
      - description: Purchase Order Item ID
        format: uuid
        in: path
        name: item_id
        required: true
        type: string
      - description: Updated item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePurchaseOrderItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.PurchaseOrderItemResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update purchase order item
      tags:
      - PurchaseOrders
  /purchase-orders/{purchase_order_id}/grns:
    get:
      consumes:
      - application/json
      description: Get all GRNs for a specific purchase order
      parameters:
      - description: Purchase Order ID
        format: uuid
        in: path
        name: purchase_order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.GRNResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get GRNs by purchase order
      tags:
      - GRNs
  /purchase-orders/number/{po_number}:
    get:
      consumes:
      - application/json
      description: Get a specific purchase order by its PO number
      parameters:
      - description: Purchase Order Number
        example: '"PO-2024-001"'
        in: path
        name: po_number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.PurchaseOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get purchase order by PO number
      tags:
      - PurchaseOrders
  /purchase-receipts:
    get:
      description: Get a paginated list of purchase receipts with optional filters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by receipt number
        in: query
        name: search
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by supplier ID
        in: query
        name: supplier_id
        type: string
      - description: Filter by start date (RFC3339 format)
        in: query
        name: start_date
        type: string
      - description: Filter by end date (RFC3339 format)
        in: query
        name: end_date
        type: string
      - default: all
        description: 'Filter by phase: order, receipt, all'
        in: query
        name: phase
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.PurchaseReceiptResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: List purchase receipts
      tags:
      - purchase-receipts
    post:
      consumes:
      - application/json
      description: Create a new purchase receipt with order details
      parameters:
      - description: Purchase receipt data
        in: body
        name: purchase_receipt
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePurchaseReceiptRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new purchase receipt
      tags:
      - purchase-receipts
  /purchase-receipts/{id}:
    delete:
      description: Delete a purchase receipt by ID
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete purchase receipt
      tags:
      - purchase-receipts
    get:
      description: Get a purchase receipt by its ID
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get purchase receipt by ID
      tags:
      - purchase-receipts
    put:
      consumes:
      - application/json
      description: Update an existing purchase receipt
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated purchase receipt data
        in: body
        name: purchase_receipt
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePurchaseReceiptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update purchase receipt
      tags:
      - purchase-receipts
  /purchase-receipts/{id}/approve:
    post:
      consumes:
      - application/json
      description: Approve a purchase receipt for ordering
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      - description: Approval data
        in: body
        name: approval
        required: true
        schema:
          $ref: '#/definitions/dto.ApproveRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Approve purchase receipt
      tags:
      - purchase-receipts
  /purchase-receipts/{id}/cancel:
    post:
      description: Cancel a purchase receipt
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel purchase receipt
      tags:
      - purchase-receipts
  /purchase-receipts/{id}/complete:
    post:
      description: Mark purchase receipt as completed
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Complete purchase receipt processing
      tags:
      - purchase-receipts
  /purchase-receipts/{id}/items:
    get:
      description: Get all items for a specific purchase receipt
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PurchaseReceiptItemResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get purchase receipt items
      tags:
      - purchase-receipts
    post:
      consumes:
      - application/json
      description: Add a new item to a purchase receipt
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      - description: Item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePurchaseReceiptItemRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add item to purchase receipt
      tags:
      - purchase-receipts
  /purchase-receipts/{id}/items/{item_id}:
    delete:
      description: Remove an item from a purchase receipt
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove item from purchase receipt
      tags:
      - purchase-receipts
    put:
      consumes:
      - application/json
      description: Update an existing purchase receipt item
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      - description: Updated item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePurchaseReceiptItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update purchase receipt item
      tags:
      - purchase-receipts
  /purchase-receipts/{id}/receive:
    post:
      consumes:
      - application/json
      description: Mark goods as received from supplier
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      - description: Receive goods data
        in: body
        name: receive_goods
        required: true
        schema:
          $ref: '#/definitions/dto.ReceiveGoodsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Receive goods from supplier
      tags:
      - purchase-receipts
  /purchase-receipts/{id}/send:
    post:
      consumes:
      - application/json
      description: Send approved purchase order to supplier
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      - description: Send order data
        in: body
        name: send_order
        required: true
        schema:
          $ref: '#/definitions/dto.SendOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Send purchase order to supplier
      tags:
      - purchase-receipts
  /purchase-receipts/{id}/verify:
    post:
      consumes:
      - application/json
      description: Verify quality and condition of received goods
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      - description: Verify goods data
        in: body
        name: verify_goods
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyGoodsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Verify received goods
      tags:
      - purchase-receipts
  /purchase-receipts/summary:
    get:
      description: Get purchase receipt analytics summary for a date range
      parameters:
      - description: Start date (RFC3339 format)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get purchase receipt summary
      tags:
      - purchase-receipts
  /purchase-receipts/suppliers/{supplier_id}/performance:
    get:
      description: Get performance metrics for a specific supplier
      parameters:
      - description: Supplier ID
        in: path
        name: supplier_id
        required: true
        type: string
      - description: Start date (RFC3339 format)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get supplier performance metrics
      tags:
      - purchase-receipts
  /reports/inventory-summary:
    get:
      consumes:
      - application/json
      description: Get comprehensive inventory summary with statistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.InventorySummaryResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get inventory summary
      tags:
      - reports
  /reports/stock-movements:
    get:
      consumes:
      - application/json
      description: Get stock movement report with filtering options
      parameters:
      - description: Filter by product ID
        in: query
        name: product_id
        type: string
      - description: Filter by movement type (IN, OUT, TRANSFER, ADJUSTMENT)
        in: query
        name: movement_type
        type: string
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      - default: 100
        description: Limit results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get stock movement report
      tags:
      - reports
  /suppliers:
    get:
      description: Get a paginated list of suppliers
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - description: Filter by active status
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Suppliers list
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/SupplierListResponse'
              type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List suppliers
      tags:
      - suppliers
    post:
      consumes:
      - application/json
      description: Create a new supplier in the system
      parameters:
      - description: Supplier creation data
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/SupplierCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Supplier created successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/SupplierDetailResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Supplier already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new supplier
      tags:
      - suppliers
  /suppliers/{id}:
    delete:
      description: Delete a supplier from the system
      parameters:
      - description: Supplier ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Supplier deleted successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Invalid supplier ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a supplier
      tags:
      - suppliers
    get:
      description: Get a specific supplier by its ID
      parameters:
      - description: Supplier ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Supplier details
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/SupplierDetailResponse'
              type: object
        "400":
          description: Invalid supplier ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get supplier by ID
      tags:
      - suppliers
    put:
      consumes:
      - application/json
      description: Update an existing supplier's information
      parameters:
      - description: Supplier ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Updated supplier data
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/SupplierUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Supplier updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/SupplierDetailResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Supplier code already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a supplier
      tags:
      - suppliers
  /suppliers/{supplier_id}/grns:
    get:
      consumes:
      - application/json
      description: Get all GRNs for a specific supplier
      parameters:
      - description: Supplier ID
        format: uuid
        in: path
        name: supplier_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.GRNResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get GRNs by supplier
      tags:
      - GRNs
  /users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by role
        enum:
        - admin
        - manager
        - staff
        - viewer
        in: query
        name: role
        type: string
      - description: Search by username or email
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a specific user by their ID
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: User update request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update a user
      tags:
      - Users
  /vehicle-brands:
    get:
      consumes:
      - application/json
      description: Get a paginated list of vehicle brands with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by name or code
        in: query
        name: search
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      - description: Filter by country code
        in: query
        name: country_code
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.VehicleBrandResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List vehicle brands
      tags:
      - Vehicle Brands
    post:
      consumes:
      - application/json
      description: Create a new vehicle brand with the provided information
      parameters:
      - description: Vehicle brand creation request
        in: body
        name: vehicle_brand
        required: true
        schema:
          $ref: '#/definitions/dto.CreateVehicleBrandRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleBrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new vehicle brand
      tags:
      - Vehicle Brands
  /vehicle-brands/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a vehicle brand by their ID (soft delete)
      parameters:
      - description: Vehicle Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Delete a vehicle brand
      tags:
      - Vehicle Brands
    get:
      consumes:
      - application/json
      description: Get a specific vehicle brand by their ID
      parameters:
      - description: Vehicle Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleBrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get vehicle brand by ID
      tags:
      - Vehicle Brands
    put:
      consumes:
      - application/json
      description: Update an existing vehicle brand's information
      parameters:
      - description: Vehicle Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Vehicle brand update request
        in: body
        name: vehicle_brand
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateVehicleBrandRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleBrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update a vehicle brand
      tags:
      - Vehicle Brands
  /vehicle-brands/{id}/activate:
    post:
      consumes:
      - application/json
      description: Activate a deactivated vehicle brand
      parameters:
      - description: Vehicle Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleBrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Activate a vehicle brand
      tags:
      - Vehicle Brands
  /vehicle-brands/{id}/deactivate:
    post:
      consumes:
      - application/json
      description: Deactivate an active vehicle brand
      parameters:
      - description: Vehicle Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleBrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Deactivate a vehicle brand
      tags:
      - Vehicle Brands
  /vehicle-brands/{id}/with-models:
    get:
      consumes:
      - application/json
      description: Get a specific vehicle brand by their ID including all associated
        vehicle models
      parameters:
      - description: Vehicle Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleBrandWithModelsResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get vehicle brand with models
      tags:
      - Vehicle Brands
  /vehicle-brands/active:
    get:
      consumes:
      - application/json
      description: Get all active vehicle brands
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.VehicleBrandResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List active vehicle brands
      tags:
      - Vehicle Brands
  /vehicle-brands/code/{code}:
    get:
      consumes:
      - application/json
      description: Get a specific vehicle brand by their code
      parameters:
      - description: Vehicle Brand code
        example: '"TOYT"'
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleBrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get vehicle brand by code
      tags:
      - Vehicle Brands
  /vehicle-brands/generate-code:
    get:
      consumes:
      - application/json
      description: Generate a unique vehicle brand code based on vehicle brand name
      parameters:
      - description: Vehicle Brand name
        example: '"Toyota"'
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Generate vehicle brand code
      tags:
      - Vehicle Brands
  /vehicle-brands/with-models:
    get:
      consumes:
      - application/json
      description: Get a paginated list of vehicle brands including all associated
        vehicle models
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.VehicleBrandWithModelsResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List vehicle brands with models
      tags:
      - Vehicle Brands
  /vehicle-compatibilities:
    get:
      consumes:
      - application/json
      description: Get a paginated list of vehicle compatibilities with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by product ID
        format: uuid
        in: query
        name: product_id
        type: string
      - description: Filter by vehicle model ID
        format: uuid
        in: query
        name: vehicle_model_id
        type: string
      - description: Filter by year
        in: query
        name: year
        type: integer
      - description: Filter by verification status
        in: query
        name: is_verified
        type: boolean
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.VehicleCompatibilityDetailResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List vehicle compatibilities
      tags:
      - Vehicle Compatibility
    post:
      consumes:
      - application/json
      description: Create a new vehicle compatibility with the provided information
      parameters:
      - description: Vehicle compatibility creation request
        in: body
        name: compatibility
        required: true
        schema:
          $ref: '#/definitions/dto.CreateVehicleCompatibilityRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleCompatibilityDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new vehicle compatibility
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a vehicle compatibility by their ID (soft delete)
      parameters:
      - description: Vehicle Compatibility ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Delete a vehicle compatibility
      tags:
      - Vehicle Compatibility
    get:
      consumes:
      - application/json
      description: Get a specific vehicle compatibility by their ID
      parameters:
      - description: Vehicle Compatibility ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleCompatibilityDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get vehicle compatibility by ID
      tags:
      - Vehicle Compatibility
    put:
      consumes:
      - application/json
      description: Update an existing vehicle compatibility's information
      parameters:
      - description: Vehicle Compatibility ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Vehicle compatibility update request
        in: body
        name: compatibility
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateVehicleCompatibilityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleCompatibilityDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update a vehicle compatibility
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/{id}/activate:
    post:
      consumes:
      - application/json
      description: Activate a deactivated vehicle compatibility
      parameters:
      - description: Vehicle Compatibility ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleCompatibilityDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Activate a vehicle compatibility
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/{id}/deactivate:
    post:
      consumes:
      - application/json
      description: Deactivate an active vehicle compatibility
      parameters:
      - description: Vehicle Compatibility ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleCompatibilityDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Deactivate a vehicle compatibility
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/{id}/unverify:
    post:
      consumes:
      - application/json
      description: Mark a vehicle compatibility as unverified
      parameters:
      - description: Vehicle Compatibility ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleCompatibilityDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Unverify a vehicle compatibility
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/{id}/verify:
    post:
      consumes:
      - application/json
      description: Mark a vehicle compatibility as verified
      parameters:
      - description: Vehicle Compatibility ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleCompatibilityDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Verify a vehicle compatibility
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/active:
    get:
      consumes:
      - application/json
      description: Get all active vehicle compatibilities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.VehicleCompatibilityResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List active vehicle compatibilities
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/bulk:
    post:
      consumes:
      - application/json
      description: Create multiple vehicle compatibilities in a single request
      parameters:
      - description: Bulk compatibility creation request
        in: body
        name: compatibilities
        required: true
        schema:
          $ref: '#/definitions/dto.BulkCreateVehicleCompatibilityRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create multiple vehicle compatibilities
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/bulk/activate:
    post:
      consumes:
      - application/json
      description: Activate multiple vehicle compatibilities in a single request
      parameters:
      - description: Bulk activation request
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/dto.BulkVehicleCompatibilityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Activate multiple vehicle compatibilities
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/bulk/deactivate:
    post:
      consumes:
      - application/json
      description: Deactivate multiple vehicle compatibilities in a single request
      parameters:
      - description: Bulk deactivation request
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/dto.BulkVehicleCompatibilityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Deactivate multiple vehicle compatibilities
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/bulk/unverify:
    post:
      consumes:
      - application/json
      description: Unverify multiple vehicle compatibilities in a single request
      parameters:
      - description: Bulk unverification request
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/dto.BulkVehicleCompatibilityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Unverify multiple vehicle compatibilities
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/bulk/verify:
    post:
      consumes:
      - application/json
      description: Verify multiple vehicle compatibilities in a single request
      parameters:
      - description: Bulk verification request
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/dto.BulkVehicleCompatibilityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Verify multiple vehicle compatibilities
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/compatible-products:
    get:
      consumes:
      - application/json
      description: Get products that are compatible with a specific vehicle model
        and year
      parameters:
      - description: Vehicle Model ID
        format: uuid
        in: query
        name: vehicle_model_id
        required: true
        type: string
      - description: Vehicle year
        in: query
        name: year
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.VehicleCompatibilityDetailResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get products compatible with a vehicle model
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/compatible-vehicles:
    get:
      consumes:
      - application/json
      description: Get vehicles that are compatible with a specific product and year
      parameters:
      - description: Product ID
        format: uuid
        in: query
        name: product_id
        required: true
        type: string
      - description: Vehicle year
        in: query
        name: year
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.VehicleCompatibilityDetailResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get vehicles compatible with a product
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/stats:
    get:
      consumes:
      - application/json
      description: Get comprehensive statistics about vehicle compatibilities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleCompatibilityStatsResponse'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get vehicle compatibility statistics
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/unverified:
    get:
      consumes:
      - application/json
      description: Get a paginated list of unverified vehicle compatibilities
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.VehicleCompatibilityResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List unverified vehicle compatibilities
      tags:
      - Vehicle Compatibility
  /vehicle-compatibilities/verified:
    get:
      consumes:
      - application/json
      description: Get a paginated list of verified vehicle compatibilities
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.VehicleCompatibilityResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List verified vehicle compatibilities
      tags:
      - Vehicle Compatibility
  /vehicle-models:
    get:
      consumes:
      - application/json
      description: Get a paginated list of vehicle models with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by name or code
        in: query
        name: search
        type: string
      - description: Filter by vehicle brand ID
        format: uuid
        in: query
        name: vehicle_brand_id
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      - description: Filter by year from
        in: query
        name: year_from
        type: integer
      - description: Filter by year to
        in: query
        name: year_to
        type: integer
      - description: Filter by fuel type
        in: query
        name: fuel_type
        type: string
      - description: Filter by transmission
        in: query
        name: transmission
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.VehicleModelDetailResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List vehicle models
      tags:
      - Vehicle Models
    post:
      consumes:
      - application/json
      description: Create a new vehicle model with the provided information
      parameters:
      - description: Vehicle model creation request
        in: body
        name: vehicle_model
        required: true
        schema:
          $ref: '#/definitions/dto.CreateVehicleModelRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleModelDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new vehicle model
      tags:
      - Vehicle Models
  /vehicle-models/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a vehicle model by their ID (soft delete)
      parameters:
      - description: Vehicle Model ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Delete a vehicle model
      tags:
      - Vehicle Models
    get:
      consumes:
      - application/json
      description: Get a specific vehicle model by their ID
      parameters:
      - description: Vehicle Model ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleModelDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get vehicle model by ID
      tags:
      - Vehicle Models
    put:
      consumes:
      - application/json
      description: Update an existing vehicle model's information
      parameters:
      - description: Vehicle Model ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Vehicle model update request
        in: body
        name: vehicle_model
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateVehicleModelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleModelDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update a vehicle model
      tags:
      - Vehicle Models
  /vehicle-models/{id}/activate:
    post:
      consumes:
      - application/json
      description: Activate a deactivated vehicle model
      parameters:
      - description: Vehicle Model ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleModelDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Activate a vehicle model
      tags:
      - Vehicle Models
  /vehicle-models/{id}/deactivate:
    post:
      consumes:
      - application/json
      description: Deactivate an active vehicle model
      parameters:
      - description: Vehicle Model ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleModelDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Deactivate a vehicle model
      tags:
      - Vehicle Models
  /vehicle-models/active:
    get:
      consumes:
      - application/json
      description: Get all active vehicle models
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.VehicleModelResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List active vehicle models
      tags:
      - Vehicle Models
  /vehicle-models/brand/{brand_id}:
    get:
      consumes:
      - application/json
      description: Get all vehicle models for a specific vehicle brand
      parameters:
      - description: Vehicle Brand ID
        format: uuid
        in: path
        name: brand_id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.VehicleModelResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get vehicle models by brand ID
      tags:
      - Vehicle Models
  /vehicle-models/code/{code}:
    get:
      consumes:
      - application/json
      description: Get a specific vehicle model by their code
      parameters:
      - description: Vehicle Model code
        example: '"TOYT-CAMR01"'
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VehicleModelDetailResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get vehicle model by code
      tags:
      - Vehicle Models
  /vehicle-models/generate-code:
    get:
      consumes:
      - application/json
      description: Generate a unique vehicle model code based on vehicle brand and
        model name
      parameters:
      - description: Vehicle Brand ID
        format: uuid
        in: query
        name: vehicle_brand_id
        required: true
        type: string
      - description: Vehicle Model name
        example: '"Camry"'
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Generate vehicle model code
      tags:
      - Vehicle Models
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
