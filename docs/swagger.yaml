basePath: /api/v1
definitions:
  ApiResponse:
    description: Simple API response with success status, message and data
    properties:
      data: {}
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  CategoryHierarchyResponse:
    description: Hierarchical representation of categories
    properties:
      category:
        $ref: '#/definitions/CategoryResponse'
      children:
        items:
          $ref: '#/definitions/CategoryHierarchyResponse'
        type: array
    type: object
  CategoryListResponse:
    description: Paginated list of categories
    properties:
      categories:
        items:
          $ref: '#/definitions/CategoryResponse'
        type: array
      pagination:
        $ref: '#/definitions/PaginationResponse'
    type: object
  CategoryPathResponse:
    description: Category path from root to target category
    properties:
      path:
        items:
          $ref: '#/definitions/CategoryResponse'
        type: array
    type: object
  CategoryResponse:
    description: Category information in API responses
    properties:
      children_count:
        example: 5
        type: integer
      created_at:
        example: "2024-01-15T09:30:00Z"
        type: string
      description:
        example: Electronic devices and accessories
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      level:
        example: 1
        type: integer
      name:
        example: Electronics
        type: string
      parent_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      path:
        example: Electronics/Computers
        type: string
      product_count:
        example: 25
        type: integer
      updated_at:
        example: "2024-01-15T09:30:00Z"
        type: string
    type: object
  CreateCategoryRequest:
    description: Request payload for creating a new category
    properties:
      description:
        example: Electronic devices and accessories
        maxLength: 500
        type: string
      name:
        example: Electronics
        maxLength: 100
        minLength: 1
        type: string
      parent_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - name
    type: object
  ErrorResponse:
    description: Standard error API response structure
    properties:
      error:
        example: Invalid request
        type: string
      message:
        example: Detailed error message
        type: string
    type: object
  MoveCategoryRequest:
    description: Request payload for moving a category to a different parent
    properties:
      new_parent_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
    type: object
  PaginationResponse:
    description: Pagination information for list responses
    properties:
      page:
        example: 1
        type: integer
      page_size:
        example: 20
        type: integer
      total:
        example: 100
        type: integer
    type: object
  SuccessResponse:
    description: Standard successful API response structure
    properties:
      data: {}
      message:
        example: Operation completed successfully
        type: string
    type: object
  SupplierCreateRequest:
    description: Request body for creating a new supplier
    properties:
      address:
        example: 123 Business St, City, State 12345
        maxLength: 500
        type: string
      code:
        example: ACME001
        maxLength: 20
        minLength: 1
        type: string
      contact_name:
        example: John Smith
        maxLength: 100
        type: string
      email:
        example: contact@acme.com
        maxLength: 100
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: ACME Corporation
        maxLength: 100
        minLength: 1
        type: string
      notes:
        example: Primary supplier for widgets
        maxLength: 1000
        type: string
      phone:
        example: +1-555-123-4567
        maxLength: 20
        type: string
    required:
    - code
    - name
    type: object
  SupplierDetailResponse:
    description: Detailed supplier information returned by the API
    properties:
      address:
        example: 123 Business St, City, State 12345
        type: string
      code:
        example: ACME001
        type: string
      contact_name:
        example: John Smith
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      email:
        example: contact@acme.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: ACME Corporation
        type: string
      notes:
        example: Primary supplier for widgets
        type: string
      phone:
        example: +1-555-123-4567
        type: string
      updated_at:
        example: "2023-01-02T12:00:00Z"
        type: string
    type: object
  SupplierUpdateRequest:
    description: Request body for updating an existing supplier
    properties:
      address:
        example: 123 Business St, City, State 12345
        maxLength: 500
        type: string
      code:
        example: ACME001
        maxLength: 20
        minLength: 1
        type: string
      contact_name:
        example: John Smith
        maxLength: 100
        type: string
      email:
        example: contact@acme.com
        maxLength: 100
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: ACME Corporation
        maxLength: 100
        minLength: 1
        type: string
      notes:
        example: Primary supplier for widgets
        maxLength: 1000
        type: string
      phone:
        example: +1-555-123-4567
        maxLength: 20
        type: string
    required:
    - code
    - name
    type: object
  UpdateCategoryRequest:
    description: Request payload for updating an existing category
    properties:
      description:
        example: Electronic devices and accessories
        maxLength: 500
        type: string
      name:
        example: Electronics
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  audit.UserActivity:
    properties:
      log_count:
        type: integer
      user_id:
        type: string
      username:
        type: string
    type: object
  dto.AuditLogResponse:
    properties:
      action:
        $ref: '#/definitions/models.AuditAction'
      audit_table:
        type: string
      id:
        type: string
      ip_address:
        type: string
      new_values: {}
      old_values: {}
      record_id:
        type: string
      timestamp:
        type: string
      user_agent:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  dto.AuditStatisticsResponse:
    properties:
      logs_by_action:
        additionalProperties:
          format: int64
          type: integer
        type: object
      logs_by_table:
        additionalProperties:
          format: int64
          type: integer
        type: object
      recent_activity:
        items:
          $ref: '#/definitions/dto.AuditLogResponse'
        type: array
      top_users:
        items:
          $ref: '#/definitions/audit.UserActivity'
        type: array
      total_logs:
        type: integer
    type: object
  dto.BaseResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.BrandResponse:
    properties:
      code:
        example: BOSCH
        type: string
      country_code:
        example: DE
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      description:
        example: German automotive parts manufacturer
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      logo_url:
        example: https://example.com/logos/bosch.png
        type: string
      name:
        example: Bosch
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      website:
        example: https://www.bosch.com
        type: string
    type: object
  dto.CategoryStockSummary:
    properties:
      category_id:
        type: string
      category_name:
        type: string
      total_items:
        type: integer
      total_value:
        type: number
    type: object
  dto.CreateBrandRequest:
    properties:
      code:
        example: BOSCH
        maxLength: 20
        type: string
      country_code:
        example: DE
        maxLength: 10
        type: string
      description:
        example: German automotive parts manufacturer
        maxLength: 500
        type: string
      logo_url:
        example: https://example.com/logos/bosch.png
        maxLength: 500
        type: string
      name:
        example: Bosch
        maxLength: 100
        minLength: 1
        type: string
      website:
        example: https://www.bosch.com
        maxLength: 200
        type: string
    required:
    - name
    type: object
  dto.CreateCustomerRequest:
    properties:
      address:
        example: 123 Main Street
        maxLength: 500
        type: string
      city:
        example: Kuala Lumpur
        maxLength: 100
        type: string
      code:
        example: JOH001
        maxLength: 20
        type: string
      country:
        example: Malaysia
        maxLength: 100
        type: string
      credit_limit:
        example: 10000
        minimum: 0
        type: number
      email:
        example: john@example.com
        maxLength: 100
        type: string
      name:
        example: John Doe
        maxLength: 100
        minLength: 1
        type: string
      notes:
        example: Regular customer
        maxLength: 1000
        type: string
      phone:
        example: "+60123456789"
        maxLength: 20
        type: string
      postal_code:
        example: "50000"
        maxLength: 20
        type: string
      state:
        example: Selangor
        maxLength: 100
        type: string
      tax_number:
        example: TAX123456
        maxLength: 50
        type: string
    required:
    - name
    type: object
  dto.CreateInventoryRequest:
    properties:
      product_id:
        type: string
      quantity:
        minimum: 0
        type: integer
      reorder_level:
        minimum: 0
        type: integer
      reserved_quantity:
        minimum: 0
        type: integer
    required:
    - product_id
    - quantity
    - reorder_level
    type: object
  dto.CreatePurchaseReceiptItemRequest:
    properties:
      item_discount_amount:
        example: 10
        minimum: 0
        type: number
      item_discount_percentage:
        example: 5
        maximum: 100
        minimum: 0
        type: number
      product_id:
        example: 550e8400-e29b-41d4-a716-446655440005
        type: string
      quantity:
        example: 10
        minimum: 1
        type: integer
      unit_cost:
        example: 100
        minimum: 0
        type: number
    required:
    - product_id
    - quantity
    - unit_cost
    type: object
  dto.CreatePurchaseReceiptRequest:
    properties:
      bill_discount_amount:
        example: 50
        minimum: 0
        type: number
      bill_discount_percentage:
        example: 5
        maximum: 100
        minimum: 0
        type: number
      items:
        items:
          $ref: '#/definitions/dto.CreatePurchaseReceiptItemRequest'
        type: array
      notes:
        example: Purchase notes
        maxLength: 1000
        type: string
      purchase_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      supplier_bill_number:
        example: SUPP-BILL-001
        maxLength: 100
        type: string
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
    required:
    - purchase_date
    - supplier_id
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - manager
        - staff
        - viewer
        example: manager
        type: string
      username:
        example: john_doe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  dto.CustomerResponse:
    properties:
      address:
        example: 123 Main Street
        type: string
      city:
        example: Kuala Lumpur
        type: string
      code:
        example: JOH001
        type: string
      country:
        example: Malaysia
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      credit_limit:
        example: 10000
        type: number
      email:
        example: john@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: John Doe
        type: string
      notes:
        example: Regular customer
        type: string
      phone:
        example: "+60123456789"
        type: string
      postal_code:
        example: "50000"
        type: string
      state:
        example: Selangor
        type: string
      tax_number:
        example: TAX123456
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.ErrorInfo:
    properties:
      code:
        example: VALIDATION_ERROR
        type: string
      details:
        example: Name field is required
        type: string
      message:
        example: Invalid input parameters
        type: string
    type: object
  dto.InventoryResponse:
    properties:
      id:
        type: string
      last_updated:
        type: string
      product_barcode:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
      quantity:
        type: integer
      reorder_level:
        type: integer
      reserved_quantity:
        type: integer
    type: object
  dto.InventorySummaryItem:
    properties:
      category:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
      reorder_level:
        type: integer
      stock_value:
        type: number
      total_stock:
        type: integer
    type: object
  dto.InventorySummaryResponse:
    properties:
      low_stock_items:
        items:
          $ref: '#/definitions/dto.InventorySummaryItem'
        type: array
      stock_by_category:
        items:
          $ref: '#/definitions/dto.CategoryStockSummary'
        type: array
      top_products:
        items:
          $ref: '#/definitions/dto.InventorySummaryItem'
        type: array
      total_products:
        type: integer
      total_stock_value:
        type: number
      zero_stock_items:
        items:
          $ref: '#/definitions/dto.InventorySummaryItem'
        type: array
    type: object
  dto.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      expires_at:
        example: "2023-01-02T12:00:00Z"
        type: string
      refresh_token:
        example: refresh_token_here
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.LowStockItemResponse:
    properties:
      deficit:
        type: integer
      product_barcode:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
      quantity:
        type: integer
      reorder_level:
        type: integer
    type: object
  dto.POSLookupResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.POSProduct'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.POSProduct:
    properties:
      barcode:
        type: string
      cost_price:
        type: number
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      quantity:
        type: integer
      quick_sale:
        type: boolean
      retail_price:
        type: number
      sku:
        type: string
      tax_category:
        type: string
    type: object
  dto.PaginatedResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: Operation completed successfully
        type: string
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
      success:
        example: true
        type: boolean
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.PaginationInfo:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 10
        type: integer
    type: object
  dto.ProductCreateRequest:
    properties:
      barcode:
        example: "1234567890123"
        type: string
      brand_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      category_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      cost_price:
        example: 10.5
        type: number
      description:
        example: A sample product for demonstration
        type: string
      dimensions:
        example: 10x5x2 cm
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Sample Product
        type: string
      retail_price:
        example: 15.99
        type: number
      sku:
        example: PROD-001
        type: string
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      weight:
        example: 0.5
        type: number
      wholesale_price:
        example: 12.5
        type: number
    required:
    - category_id
    - name
    - sku
    type: object
  dto.ProductInventoryResponse:
    properties:
      available_quantity:
        example: 45
        type: integer
      max_level:
        example: 100
        type: integer
      quantity:
        example: 50
        type: integer
      reorder_level:
        example: 10
        type: integer
      reserved_quantity:
        example: 5
        type: integer
    type: object
  dto.ProductResponse:
    properties:
      barcode:
        example: "1234567890123"
        type: string
      brand:
        $ref: '#/definitions/dto.BrandResponse'
      brand_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      category:
        $ref: '#/definitions/CategoryResponse'
      category_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      cost_price:
        example: 10.5
        type: number
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: A sample product for demonstration
        type: string
      dimensions:
        example: 10x5x2 cm
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      inventory:
        items:
          $ref: '#/definitions/dto.ProductInventoryResponse'
        type: array
      is_active:
        example: true
        type: boolean
      name:
        example: Sample Product
        type: string
      retail_price:
        example: 15.99
        type: number
      sku:
        example: PROD-001
        type: string
      supplier:
        $ref: '#/definitions/dto.SupplierResponse'
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      total_stock:
        example: 100
        type: integer
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      weight:
        example: 0.5
        type: number
      wholesale_price:
        example: 12.5
        type: number
    type: object
  dto.ProductUpdateRequest:
    properties:
      barcode:
        example: "1234567890124"
        type: string
      brand_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      category_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      cost_price:
        example: 11
        type: number
      description:
        example: Updated description
        type: string
      dimensions:
        example: 11x5x2 cm
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Updated Product Name
        type: string
      retail_price:
        example: 16.99
        type: number
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      weight:
        example: 0.6
        type: number
      wholesale_price:
        example: 13.5
        type: number
    type: object
  dto.PurchaseReceiptItemResponse:
    properties:
      created_at:
        description: Timestamps
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440004
        type: string
      item_discount_amount:
        example: 10
        type: number
      item_discount_percentage:
        example: 5
        type: number
      line_total:
        example: 945
        type: number
      product_id:
        example: 550e8400-e29b-41d4-a716-446655440005
        type: string
      purchase_receipt_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      quantity:
        description: Essential Information
        example: 10
        type: integer
      unit_cost:
        example: 100
        type: number
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.PurchaseReceiptResponse:
    properties:
      bill_discount_amount:
        description: Financial Information
        example: 50
        type: number
      bill_discount_percentage:
        example: 5
        type: number
      created_at:
        description: Timestamps
        example: "2023-01-01T12:00:00Z"
        type: string
      created_by_id:
        description: User Tracking
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      items:
        description: Items
        items:
          $ref: '#/definitions/dto.PurchaseReceiptItemResponse'
        type: array
      notes:
        description: Additional Information
        example: Urgent order
        type: string
      purchase_date:
        description: Essential Information
        example: "2023-01-01T12:00:00Z"
        type: string
      receipt_number:
        example: PR-2024-001
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.PurchaseReceiptStatus'
        example: pending
      supplier_bill_number:
        example: SUPP-001
        type: string
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      total_amount:
        example: 1110
        type: number
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  dto.ReorderLevelUpdate:
    properties:
      product_id:
        type: string
      reorder_level:
        minimum: 0
        type: integer
    required:
    - product_id
    - reorder_level
    type: object
  dto.StockAdjustmentRequest:
    properties:
      movement_type:
        enum:
        - IN
        - OUT
        - ADJUSTMENT
        type: string
      notes:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      reason:
        enum:
        - receiving
        - sale
        - sales
        - damage
        - corrections
        - correction
        - inventory_count
        - return
        - supplier_return
        - other
        type: string
    required:
    - movement_type
    - product_id
    - quantity
    - reason
    type: object
  dto.StockMovementResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      movement_type:
        type: string
      notes:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
      quantity:
        type: integer
      reference_id:
        type: string
      user_id:
        type: string
    type: object
  dto.SupplierResponse:
    properties:
      code:
        example: SUP-001
        type: string
      email:
        example: supplier@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Supplier Name
        type: string
      phone:
        example: +1-555-0123
        type: string
    type: object
  dto.UpdateBrandRequest:
    properties:
      code:
        example: BOSCH2
        maxLength: 20
        type: string
      country_code:
        example: DE
        maxLength: 10
        type: string
      description:
        example: Updated description
        maxLength: 500
        type: string
      is_active:
        example: true
        type: boolean
      logo_url:
        example: https://example.com/logos/bosch-new.png
        maxLength: 500
        type: string
      name:
        example: Bosch Updated
        maxLength: 100
        minLength: 1
        type: string
      website:
        example: https://www.bosch-updated.com
        maxLength: 200
        type: string
    type: object
  dto.UpdateCustomerRequest:
    properties:
      address:
        example: 456 Updated Street
        maxLength: 500
        type: string
      city:
        example: Kuala Lumpur
        maxLength: 100
        type: string
      code:
        example: JOH002
        maxLength: 20
        type: string
      country:
        example: Malaysia
        maxLength: 100
        type: string
      credit_limit:
        example: 15000
        minimum: 0
        type: number
      email:
        example: john.updated@example.com
        maxLength: 100
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: John Doe Updated
        maxLength: 100
        minLength: 1
        type: string
      notes:
        example: Updated notes
        maxLength: 1000
        type: string
      phone:
        example: "+60123456789"
        maxLength: 20
        type: string
      postal_code:
        example: "50000"
        maxLength: 20
        type: string
      state:
        example: Selangor
        maxLength: 100
        type: string
      tax_number:
        example: TAX123456
        maxLength: 50
        type: string
    type: object
  dto.UpdatePurchaseReceiptItemRequest:
    properties:
      item_discount_amount:
        example: 10
        minimum: 0
        type: number
      item_discount_percentage:
        example: 5
        maximum: 100
        minimum: 0
        type: number
      quantity:
        example: 10
        minimum: 1
        type: integer
      unit_cost:
        example: 100
        minimum: 0
        type: number
    type: object
  dto.UpdatePurchaseReceiptRequest:
    properties:
      bill_discount_amount:
        example: 50
        minimum: 0
        type: number
      bill_discount_percentage:
        example: 5
        maximum: 100
        minimum: 0
        type: number
      notes:
        example: Purchase notes
        maxLength: 1000
        type: string
      purchase_date:
        example: "2023-01-01T12:00:00Z"
        type: string
      supplier_bill_number:
        example: SUPP-BILL-001
        maxLength: 100
        type: string
      supplier_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
    type: object
  dto.UpdateReorderLevelsRequest:
    properties:
      reorder_levels:
        items:
          $ref: '#/definitions/dto.ReorderLevelUpdate'
        minItems: 1
        type: array
    required:
    - reorder_levels
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        example: john_updated@example.com
        type: string
      role:
        enum:
        - admin
        - manager
        - staff
        - viewer
        example: staff
        type: string
      username:
        example: john_doe_updated
        maxLength: 50
        minLength: 3
        type: string
    type: object
  dto.UserResponse:
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      last_login:
        example: "2023-01-01T12:00:00Z"
        type: string
      role:
        enum:
        - admin
        - manager
        - staff
        - viewer
        example: manager
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      username:
        example: john_doe
        type: string
    type: object
  dto.ZeroStockItemResponse:
    properties:
      last_updated:
        type: string
      product_barcode:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      product_sku:
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
  handlers.LoginResponse:
    properties:
      expires_in:
        example: 86400
        type: integer
      token:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  models.AuditAction:
    enum:
    - CREATE
    - UPDATE
    - DELETE
    - LOGIN
    - LOGOUT
    type: string
    x-enum-varnames:
    - ActionCreate
    - ActionUpdate
    - ActionDelete
    - ActionLogin
    - ActionLogout
  models.PurchaseReceiptStatus:
    enum:
    - pending
    - received
    - completed
    - cancelled
    type: string
    x-enum-comments:
      PurchaseReceiptStatusCancelled: Order cancelled
      PurchaseReceiptStatusCompleted: Fully received and processed
      PurchaseReceiptStatusPending: Order created, awaiting processing
      PurchaseReceiptStatusReceived: Goods received, being processed
    x-enum-descriptions:
    - Order created, awaiting processing
    - Goods received, being processed
    - Fully received and processed
    - Order cancelled
    x-enum-varnames:
    - PurchaseReceiptStatusPending
    - PurchaseReceiptStatusReceived
    - PurchaseReceiptStatusCompleted
    - PurchaseReceiptStatusCancelled
  router.HealthResponse:
    properties:
      status:
        example: ok
        type: string
      timestamp:
        example: "2023-01-01T12:00:00Z"
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
host: localhost:9090
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A comprehensive vehicle spare parts shop management system with single-location
    inventory tracking, brand management, vehicle compatibility, unified purchase
    receipt processing, customer management, JWT authentication, and role-based access
    control. Features include product catalogs, vehicle-part compatibility, purchase
    order/goods receipt workflow, customer relationship management, audit trails,
    and role-based access control across the entire system.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Vehicle Spare Parts Shop Management API
  version: "1.0"
paths:
  /audit-logs:
    get:
      consumes:
      - application/json
      description: Get audit logs with optional filtering
      parameters:
      - description: Filter by table name
        in: query
        name: table
        type: string
      - description: Filter by record ID
        in: query
        name: record_id
        type: string
      - description: Filter by action (CREATE, UPDATE, DELETE, LOGIN, LOGOUT)
        in: query
        name: action
        type: string
      - description: Filter by user ID
        in: query
        name: user_id
        type: string
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      - default: 50
        description: Limit results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get audit logs
      tags:
      - audit
  /audit-logs/statistics:
    get:
      consumes:
      - application/json
      description: Get comprehensive audit statistics including activity summaries
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuditStatisticsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get audit statistics
      tags:
      - audit
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return login information
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Log out the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: User logout
      tags:
      - Authentication
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get current authenticated user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Get current user info
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate a new JWT token using current token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/handlers.LoginResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Refresh JWT token
      tags:
      - Authentication
  /brands:
    get:
      consumes:
      - application/json
      description: Get a paginated list of brands with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by name or code
        in: query
        name: search
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      - description: Filter by country code
        in: query
        name: country_code
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.BrandResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List brands
      tags:
      - Brands
    post:
      consumes:
      - application/json
      description: Create a new brand with the provided information
      parameters:
      - description: Brand creation request
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBrandRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new brand
      tags:
      - Brands
  /brands/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a brand by their ID (soft delete)
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Delete a brand
      tags:
      - Brands
    get:
      consumes:
      - application/json
      description: Get a specific brand by their ID
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get brand by ID
      tags:
      - Brands
    put:
      consumes:
      - application/json
      description: Update an existing brand's information
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Brand update request
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBrandRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update a brand
      tags:
      - Brands
  /brands/{id}/activate:
    post:
      consumes:
      - application/json
      description: Activate a deactivated brand
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Activate a brand
      tags:
      - Brands
  /brands/{id}/deactivate:
    post:
      consumes:
      - application/json
      description: Deactivate an active brand
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Deactivate a brand
      tags:
      - Brands
  /brands/active:
    get:
      consumes:
      - application/json
      description: Get all active brands
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.BrandResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List active brands
      tags:
      - Brands
  /brands/code/{code}:
    get:
      consumes:
      - application/json
      description: Get a specific brand by their code
      parameters:
      - description: Brand code
        example: '"BOSCH"'
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.BrandResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get brand by code
      tags:
      - Brands
  /brands/generate-code:
    get:
      consumes:
      - application/json
      description: Generate a unique brand code based on brand name
      parameters:
      - description: Brand name
        example: '"Bosch"'
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Generate brand code
      tags:
      - Brands
  /categories:
    get:
      consumes:
      - application/json
      description: Get a paginated list of categories with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: page_size
        type: integer
      - description: Filter by category level (0-5)
        in: query
        name: level
        type: integer
      - description: Filter by parent category ID
        in: query
        name: parent_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/CategoryResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create category
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category (must not have products or subcategories)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Get category details by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update category information
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update category
      tags:
      - categories
  /categories/{id}/children:
    get:
      consumes:
      - application/json
      description: Get all child categories of a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/CategoryResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category children
      tags:
      - categories
  /categories/{id}/hierarchy:
    get:
      consumes:
      - application/json
      description: Get the complete hierarchical tree of categories from a root category
      parameters:
      - description: Root category ID (optional, if not provided returns all root
          categories)
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryHierarchyResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category hierarchy
      tags:
      - categories
  /categories/{id}/move:
    put:
      consumes:
      - application/json
      description: Move a category to a different parent (or root level)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Move information
        in: body
        name: move
        required: true
        schema:
          $ref: '#/definitions/MoveCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Move category
      tags:
      - categories
  /categories/{id}/path:
    get:
      consumes:
      - application/json
      description: Get the path from root to the specified category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryPathResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category path
      tags:
      - categories
  /categories/hierarchy:
    get:
      consumes:
      - application/json
      description: Get the complete hierarchical tree of categories from a root category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryHierarchyResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get category hierarchy
      tags:
      - categories
  /categories/roots:
    get:
      consumes:
      - application/json
      description: Get all root-level categories (categories with no parent)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/CategoryResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get root categories
      tags:
      - categories
  /categories/search:
    get:
      consumes:
      - application/json
      description: Search categories by name or description
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/CategoryListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search categories
      tags:
      - categories
  /customers:
    get:
      consumes:
      - application/json
      description: Get a paginated list of customers with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by name, code, or email
        in: query
        name: search
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      - description: Filter by city
        in: query
        name: city
        type: string
      - description: Filter by state
        in: query
        name: state
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.CustomerResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List customers
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Create a new customer with the provided information
      parameters:
      - description: Customer creation request
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new customer
      tags:
      - Customers
  /customers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a customer by their ID (soft delete)
      parameters:
      - description: Customer ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Delete a customer
      tags:
      - Customers
    get:
      consumes:
      - application/json
      description: Get a specific customer by their ID
      parameters:
      - description: Customer ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get customer by ID
      tags:
      - Customers
    put:
      consumes:
      - application/json
      description: Update an existing customer's information
      parameters:
      - description: Customer ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Customer update request
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update a customer
      tags:
      - Customers
  /customers/{id}/activate:
    post:
      consumes:
      - application/json
      description: Activate a deactivated customer
      parameters:
      - description: Customer ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Activate a customer
      tags:
      - Customers
  /customers/{id}/deactivate:
    post:
      consumes:
      - application/json
      description: Deactivate an active customer
      parameters:
      - description: Customer ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Deactivate a customer
      tags:
      - Customers
  /customers/active:
    get:
      consumes:
      - application/json
      description: Get all active customers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.CustomerResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List active customers
      tags:
      - Customers
  /customers/code/{code}:
    get:
      consumes:
      - application/json
      description: Get a specific customer by their code
      parameters:
      - description: Customer code
        example: '"JOH001"'
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get customer by code
      tags:
      - Customers
  /customers/generate-code:
    get:
      consumes:
      - application/json
      description: Generate a unique customer code based on customer name
      parameters:
      - description: Customer name
        example: '"John Doe"'
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Generate customer code
      tags:
      - Customers
  /health:
    get:
      description: Returns the health status of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.HealthResponse'
      summary: Health check
      tags:
      - System
  /inventory:
    get:
      consumes:
      - application/json
      description: Get a paginated list of inventory records with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by product ID
        in: query
        name: product_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.InventoryResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List inventory records
      tags:
      - inventory
    post:
      consumes:
      - application/json
      description: Create a new inventory record for a product
      parameters:
      - description: Inventory data
        in: body
        name: inventory
        required: true
        schema:
          $ref: '#/definitions/dto.CreateInventoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.InventoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create inventory record
      tags:
      - inventory
  /inventory/adjust:
    post:
      consumes:
      - application/json
      description: Adjust stock levels for a product (increase or decrease)
      parameters:
      - description: Stock adjustment data
        in: body
        name: adjustment
        required: true
        schema:
          $ref: '#/definitions/dto.StockAdjustmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.StockMovementResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Adjust stock levels
      tags:
      - inventory
  /inventory/low-stock:
    get:
      consumes:
      - application/json
      description: Get items that are at or below their reorder level
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.LowStockItemResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get low stock items
      tags:
      - inventory
  /inventory/reorder-levels:
    put:
      consumes:
      - application/json
      description: Update reorder levels for multiple inventory records
      parameters:
      - description: Reorder levels data
        in: body
        name: levels
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateReorderLevelsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update reorder levels
      tags:
      - inventory
  /inventory/zero-stock:
    get:
      consumes:
      - application/json
      description: Get items that are completely out of stock
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/ApiResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ZeroStockItemResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get zero stock items
      tags:
      - inventory
  /pos/lookup:
    get:
      consumes:
      - application/json
      description: Search products for POS by barcode, SKU, or name
      parameters:
      - description: Search query (barcode, SKU, or name)
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Products found
          schema:
            $ref: '#/definitions/dto.POSLookupResponse'
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: POS product lookup
      tags:
      - pos
  /products:
    get:
      consumes:
      - application/json
      description: Get a paginated list of products with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: per_page
        type: integer
      - description: Filter by category ID
        in: query
        name: category_id
        type: string
      - description: Filter by supplier ID
        in: query
        name: supplier_id
        type: string
      - description: Filter by brand ID
        in: query
        name: brand_id
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ProductResponse'
                  type: array
              type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product in the system
      parameters:
      - description: Product creation data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Product already exists
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product from the system
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Delete product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a specific product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product update data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict with existing data
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update product
      tags:
      - products
  /products/{id}/inventory:
    get:
      consumes:
      - application/json
      description: Get inventory information for a specific product across all locations
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product inventory retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ProductInventoryResponse'
                  type: array
              type: object
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get product inventory
      tags:
      - products
  /products/{product_id}/brand:
    delete:
      consumes:
      - application/json
      description: Remove brand assignment from a product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Brand removed successfully
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Remove product brand
      tags:
      - products
  /products/{product_id}/brand/{brand_id}:
    put:
      consumes:
      - application/json
      description: Assign a brand to a product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      - description: Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Brand assigned successfully
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Invalid product or brand ID
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Product or brand not found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Set product brand
      tags:
      - products
  /products/brand/{brand_id}:
    get:
      consumes:
      - application/json
      description: Get all products for a specific brand
      parameters:
      - description: Brand ID
        in: path
        name: brand_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ProductResponse'
                  type: array
              type: object
        "400":
          description: Invalid brand ID
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Brand not found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get products by brand
      tags:
      - products
  /products/no-brand:
    get:
      consumes:
      - application/json
      description: Get all products that do not have a brand assigned
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ProductResponse'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get products without brand
      tags:
      - products
  /products/pos-ready:
    get:
      consumes:
      - application/json
      description: Get all active products formatted for POS use
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: POS products
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.POSProduct'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get POS-ready products
      tags:
      - pos
  /products/search:
    get:
      consumes:
      - application/json
      description: Search products by name, SKU, or other criteria
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Products found
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ProductResponse'
                  type: array
              type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Search products
      tags:
      - products
  /purchase-receipts:
    get:
      description: Get a paginated list of purchase receipts with optional filters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by receipt number
        in: query
        name: search
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by supplier ID
        in: query
        name: supplier_id
        type: string
      - description: Filter by start date (RFC3339 format)
        in: query
        name: start_date
        type: string
      - description: Filter by end date (RFC3339 format)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.PurchaseReceiptResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: List purchase receipts
      tags:
      - purchase-receipts
    post:
      consumes:
      - application/json
      description: Create a new purchase receipt with order details
      parameters:
      - description: Purchase receipt data
        in: body
        name: purchase_receipt
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePurchaseReceiptRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new purchase receipt
      tags:
      - purchase-receipts
  /purchase-receipts/{id}:
    delete:
      description: Delete a purchase receipt by ID
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete purchase receipt
      tags:
      - purchase-receipts
    get:
      description: Get a purchase receipt by its ID
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get purchase receipt by ID
      tags:
      - purchase-receipts
    put:
      consumes:
      - application/json
      description: Update an existing purchase receipt
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated purchase receipt data
        in: body
        name: purchase_receipt
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePurchaseReceiptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update purchase receipt
      tags:
      - purchase-receipts
  /purchase-receipts/{id}/cancel:
    post:
      description: Cancel a purchase receipt
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel purchase receipt
      tags:
      - purchase-receipts
  /purchase-receipts/{id}/complete:
    post:
      description: Mark purchase receipt as completed
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Complete purchase receipt processing
      tags:
      - purchase-receipts
  /purchase-receipts/{id}/items:
    get:
      description: Get all items for a specific purchase receipt
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PurchaseReceiptItemResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get purchase receipt items
      tags:
      - purchase-receipts
    post:
      consumes:
      - application/json
      description: Add a new item to a purchase receipt
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      - description: Item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePurchaseReceiptItemRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add item to purchase receipt
      tags:
      - purchase-receipts
  /purchase-receipts/{id}/items/{item_id}:
    delete:
      description: Remove an item from a purchase receipt
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove item from purchase receipt
      tags:
      - purchase-receipts
    put:
      consumes:
      - application/json
      description: Update an existing purchase receipt item
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      - description: Updated item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePurchaseReceiptItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update purchase receipt item
      tags:
      - purchase-receipts
  /purchase-receipts/{id}/receive:
    post:
      consumes:
      - application/json
      description: Mark goods as received from supplier
      parameters:
      - description: Purchase Receipt ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PurchaseReceiptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Receive goods from supplier
      tags:
      - purchase-receipts
  /purchase-receipts/calculate-discount:
    post:
      consumes:
      - application/json
      description: Calculate total discount for a purchase receipt with items
      parameters:
      - description: Purchase receipt data for discount calculation
        in: body
        name: calculation
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePurchaseReceiptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Calculate purchase receipt discount
      tags:
      - purchase-receipts
  /purchase-receipts/summary:
    get:
      description: Get purchase receipt analytics summary for a date range
      parameters:
      - description: Start date (RFC3339 format)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get purchase receipt summary
      tags:
      - purchase-receipts
  /purchase-receipts/suppliers/{supplier_id}/performance:
    get:
      description: Get performance metrics for a specific supplier
      parameters:
      - description: Supplier ID
        in: path
        name: supplier_id
        required: true
        type: string
      - description: Start date (RFC3339 format)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get supplier performance metrics
      tags:
      - purchase-receipts
  /reports/inventory-summary:
    get:
      consumes:
      - application/json
      description: Get comprehensive inventory summary with statistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.InventorySummaryResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get inventory summary
      tags:
      - reports
  /reports/stock-movements:
    get:
      consumes:
      - application/json
      description: Get stock movement report with filtering options
      parameters:
      - description: Filter by product ID
        in: query
        name: product_id
        type: string
      - description: Filter by movement type (IN, OUT, TRANSFER, ADJUSTMENT)
        in: query
        name: movement_type
        type: string
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      - default: 100
        description: Limit results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get stock movement report
      tags:
      - reports
  /suppliers:
    get:
      description: Get a paginated list of suppliers
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - description: Filter by active status
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Suppliers list
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/SupplierDetailResponse'
                  type: array
              type: object
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List suppliers
      tags:
      - suppliers
    post:
      consumes:
      - application/json
      description: Create a new supplier in the system
      parameters:
      - description: Supplier creation data
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/SupplierCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Supplier created successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/SupplierDetailResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Supplier already exists
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new supplier
      tags:
      - suppliers
  /suppliers/{id}:
    delete:
      description: Delete a supplier from the system
      parameters:
      - description: Supplier ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Supplier deleted successfully
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Invalid supplier ID
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Delete a supplier
      tags:
      - suppliers
    get:
      description: Get a specific supplier by its ID
      parameters:
      - description: Supplier ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Supplier details
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/SupplierDetailResponse'
              type: object
        "400":
          description: Invalid supplier ID
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get supplier by ID
      tags:
      - suppliers
    put:
      consumes:
      - application/json
      description: Update an existing supplier's information
      parameters:
      - description: Supplier ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Updated supplier data
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/SupplierUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Supplier updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/SupplierDetailResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Supplier code already exists
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update a supplier
      tags:
      - suppliers
  /users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by role
        enum:
        - admin
        - manager
        - staff
        - viewer
        in: query
        name: role
        type: string
      - description: Search by username or email
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: List users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a specific user by their ID
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: User update request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Update a user
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
