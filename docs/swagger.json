{
    "swagger": "2.0",
    "info": {
        "description": "A comprehensive vehicle spare parts shop management system with single-location inventory tracking, brand management, vehicle compatibility, unified purchase receipt processing, customer management, JWT authentication, and role-based access control. Features include product catalogs, vehicle-part compatibility, purchase order/goods receipt workflow, customer relationship management, audit trails, and role-based access control across the entire system.",
        "title": "Vehicle Spare Parts Shop Management API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:9090",
    "basePath": "/api/v1",
    "paths": {
        "/audit-logs": {
            "get": {
                "description": "Get audit logs with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get audit logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by table name",
                        "name": "table",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by record ID",
                        "name": "record_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by action (CREATE, UPDATE, DELETE, LOGIN, LOGOUT)",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/audit-logs/statistics": {
            "get": {
                "description": "Get comprehensive audit statistics including activity summaries",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get audit statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuditStatisticsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user and return login information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.LoginResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Log out the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get current authenticated user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get current user info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate a new JWT token using current token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh JWT token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/handlers.LoginResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/brands": {
            "get": {
                "description": "Get a paginated list of brands with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "List brands",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or code",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by country code",
                        "name": "country_code",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.BrandResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new brand with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "Create a new brand",
                "parameters": [
                    {
                        "description": "Brand creation request",
                        "name": "brand",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateBrandRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.BrandResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/brands/active": {
            "get": {
                "description": "Get all active brands",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "List active brands",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.BrandResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/brands/code/{code}": {
            "get": {
                "description": "Get a specific brand by their code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "Get brand by code",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"BOSCH\"",
                        "description": "Brand code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.BrandResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/brands/generate-code": {
            "get": {
                "description": "Generate a unique brand code based on brand name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "Generate brand code",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"Bosch\"",
                        "description": "Brand name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/brands/{id}": {
            "get": {
                "description": "Get a specific brand by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "Get brand by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.BrandResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing brand's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "Update a brand",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Brand update request",
                        "name": "brand",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateBrandRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.BrandResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a brand by their ID (soft delete)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "Delete a brand",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/brands/{id}/activate": {
            "post": {
                "description": "Activate a deactivated brand",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "Activate a brand",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.BrandResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/brands/{id}/deactivate": {
            "post": {
                "description": "Deactivate an active brand",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brands"
                ],
                "summary": "Deactivate a brand",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.BrandResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "description": "Get a paginated list of categories with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "List categories",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by category level (0-5)",
                        "name": "level",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by parent category ID",
                        "name": "parent_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/CategoryResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Create category",
                "parameters": [
                    {
                        "description": "Category information",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateCategoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/CategoryResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/categories/hierarchy": {
            "get": {
                "description": "Get the complete hierarchical tree of categories from a root category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get category hierarchy",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/CategoryHierarchyResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/categories/roots": {
            "get": {
                "description": "Get all root-level categories (categories with no parent)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get root categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/CategoryResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/categories/search": {
            "get": {
                "description": "Search categories by name or description",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Search categories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/CategoryListResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "get": {
                "description": "Get category details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/CategoryResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update category information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Update category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Category information",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateCategoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/CategoryResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a category (must not have products or subcategories)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Delete category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/categories/{id}/children": {
            "get": {
                "description": "Get all child categories of a category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get category children",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/CategoryResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/categories/{id}/hierarchy": {
            "get": {
                "description": "Get the complete hierarchical tree of categories from a root category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get category hierarchy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Root category ID (optional, if not provided returns all root categories)",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/CategoryHierarchyResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/categories/{id}/move": {
            "put": {
                "description": "Move a category to a different parent (or root level)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Move category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Move information",
                        "name": "move",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MoveCategoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/CategoryResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/categories/{id}/path": {
            "get": {
                "description": "Get the path from root to the specified category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get category path",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/CategoryPathResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "description": "Get a paginated list of customers with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "List customers",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name, code, or email",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by city",
                        "name": "city",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by state",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.CustomerResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new customer with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Create a new customer",
                "parameters": [
                    {
                        "description": "Customer creation request",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCustomerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.CustomerResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/customers/active": {
            "get": {
                "description": "Get all active customers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "List active customers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.CustomerResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/customers/code/{code}": {
            "get": {
                "description": "Get a specific customer by their code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Get customer by code",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"JOH001\"",
                        "description": "Customer code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.CustomerResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/customers/generate-code": {
            "get": {
                "description": "Generate a unique customer code based on customer name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Generate customer code",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"John Doe\"",
                        "description": "Customer name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/customers/{id}": {
            "get": {
                "description": "Get a specific customer by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Get customer by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.CustomerResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing customer's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Update a customer",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Customer update request",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCustomerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.CustomerResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a customer by their ID (soft delete)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Delete a customer",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/customers/{id}/activate": {
            "post": {
                "description": "Activate a deactivated customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Activate a customer",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.CustomerResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/customers/{id}/deactivate": {
            "post": {
                "description": "Deactivate an active customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Deactivate a customer",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.CustomerResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns the health status of the API",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.HealthResponse"
                        }
                    }
                }
            }
        },
        "/inventory": {
            "get": {
                "description": "Get a paginated list of inventory records with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventory"
                ],
                "summary": "List inventory records",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by product ID",
                        "name": "product_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.InventoryResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new inventory record for a product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventory"
                ],
                "summary": "Create inventory record",
                "parameters": [
                    {
                        "description": "Inventory data",
                        "name": "inventory",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateInventoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.InventoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventory/adjust": {
            "post": {
                "description": "Adjust stock levels for a product (increase or decrease)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventory"
                ],
                "summary": "Adjust stock levels",
                "parameters": [
                    {
                        "description": "Stock adjustment data",
                        "name": "adjustment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.StockAdjustmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.StockMovementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventory/low-stock": {
            "get": {
                "description": "Get items that are at or below their reorder level",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventory"
                ],
                "summary": "Get low stock items",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.LowStockItemResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventory/reorder-levels": {
            "put": {
                "description": "Update reorder levels for multiple inventory records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventory"
                ],
                "summary": "Update reorder levels",
                "parameters": [
                    {
                        "description": "Reorder levels data",
                        "name": "levels",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateReorderLevelsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventory/zero-stock": {
            "get": {
                "description": "Get items that are completely out of stock",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventory"
                ],
                "summary": "Get zero stock items",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.ZeroStockItemResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pos/lookup": {
            "get": {
                "description": "Search products for POS by barcode, SKU, or name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pos"
                ],
                "summary": "POS product lookup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query (barcode, SKU, or name)",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products found",
                        "schema": {
                            "$ref": "#/definitions/dto.POSLookupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Get a paginated list of products with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "List products",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by category ID",
                        "name": "category_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by supplier ID",
                        "name": "supplier_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by brand ID",
                        "name": "brand_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "is_active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.ProductResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new product in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Create a new product",
                "parameters": [
                    {
                        "description": "Product creation data",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ProductCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ProductResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "Product already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/products/brand/{brand_id}": {
            "get": {
                "description": "Get all products for a specific brand",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get products by brand",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Brand ID",
                        "name": "brand_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.ProductResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid brand ID",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Brand not found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/products/no-brand": {
            "get": {
                "description": "Get all products that do not have a brand assigned",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get products without brand",
                "responses": {
                    "200": {
                        "description": "Products retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.ProductResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/products/pos-ready": {
            "get": {
                "description": "Get all active products formatted for POS use",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pos"
                ],
                "summary": "Get POS-ready products",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "POS products",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.POSProduct"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/products/search": {
            "get": {
                "description": "Search products by name, SKU, or other criteria",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Search products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "per_page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.ProductResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "description": "Get a specific product by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get product by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ProductResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid product ID",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Update product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product update data",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ProductUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ProductResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict with existing data",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a product from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Delete product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid product ID",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/products/{id}/inventory": {
            "get": {
                "description": "Get inventory information for a specific product across all locations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get product inventory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product inventory retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.ProductInventoryResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid product ID",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/products/{product_id}/brand": {
            "delete": {
                "description": "Remove brand assignment from a product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Remove product brand",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand removed successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid product ID",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/products/{product_id}/brand/{brand_id}": {
            "put": {
                "description": "Assign a brand to a product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Set product brand",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Brand ID",
                        "name": "brand_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand assigned successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid product or brand ID",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Product or brand not found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/purchase-receipts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of purchase receipts with optional filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "List purchase receipts",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by receipt number",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by supplier ID",
                        "name": "supplier_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by start date (RFC3339 format)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by end date (RFC3339 format)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.PurchaseReceiptResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new purchase receipt with order details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Create a new purchase receipt",
                "parameters": [
                    {
                        "description": "Purchase receipt data",
                        "name": "purchase_receipt",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePurchaseReceiptRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.PurchaseReceiptResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-receipts/calculate-discount": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Calculate total discount for a purchase receipt with items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Calculate purchase receipt discount",
                "parameters": [
                    {
                        "description": "Purchase receipt data for discount calculation",
                        "name": "calculation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePurchaseReceiptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-receipts/summary": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get purchase receipt analytics summary for a date range",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Get purchase receipt summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (RFC3339 format)",
                        "name": "start_date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date (RFC3339 format)",
                        "name": "end_date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-receipts/suppliers/{supplier_id}/performance": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get performance metrics for a specific supplier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Get supplier performance metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Supplier ID",
                        "name": "supplier_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start date (RFC3339 format)",
                        "name": "start_date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date (RFC3339 format)",
                        "name": "end_date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-receipts/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a purchase receipt by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Get purchase receipt by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Receipt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PurchaseReceiptResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing purchase receipt",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Update purchase receipt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Receipt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated purchase receipt data",
                        "name": "purchase_receipt",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePurchaseReceiptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PurchaseReceiptResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a purchase receipt by ID",
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Delete purchase receipt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Receipt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-receipts/{id}/cancel": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel a purchase receipt",
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Cancel purchase receipt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Receipt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PurchaseReceiptResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-receipts/{id}/complete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark purchase receipt as completed",
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Complete purchase receipt processing",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Receipt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PurchaseReceiptResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-receipts/{id}/items": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all items for a specific purchase receipt",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Get purchase receipt items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Receipt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PurchaseReceiptItemResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new item to a purchase receipt",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Add item to purchase receipt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Receipt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Item data",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePurchaseReceiptItemRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.PurchaseReceiptItemResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-receipts/{id}/items/{item_id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing purchase receipt item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Update purchase receipt item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Receipt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "item_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated item data",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePurchaseReceiptItemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PurchaseReceiptItemResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove an item from a purchase receipt",
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Remove item from purchase receipt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Receipt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "item_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-receipts/{id}/receive": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark goods as received from supplier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Receive goods from supplier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Receipt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PurchaseReceiptResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reports/inventory-summary": {
            "get": {
                "description": "Get comprehensive inventory summary with statistics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Get inventory summary",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.InventorySummaryResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reports/stock-movements": {
            "get": {
                "description": "Get stock movement report with filtering options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Get stock movement report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by product ID",
                        "name": "product_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by movement type (IN, OUT, TRANSFER, ADJUSTMENT)",
                        "name": "movement_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/suppliers": {
            "get": {
                "description": "Get a paginated list of suppliers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suppliers"
                ],
                "summary": "List suppliers",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Suppliers list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/SupplierDetailResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new supplier in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suppliers"
                ],
                "summary": "Create a new supplier",
                "parameters": [
                    {
                        "description": "Supplier creation data",
                        "name": "supplier",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SupplierCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Supplier created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/SupplierDetailResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "Supplier already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/suppliers/{id}": {
            "get": {
                "description": "Get a specific supplier by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suppliers"
                ],
                "summary": "Get supplier by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Supplier ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Supplier details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/SupplierDetailResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid supplier ID",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Supplier not found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing supplier's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suppliers"
                ],
                "summary": "Update a supplier",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Supplier ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated supplier data",
                        "name": "supplier",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SupplierUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Supplier updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/SupplierDetailResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Supplier not found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "Supplier code already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a supplier from the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suppliers"
                ],
                "summary": "Delete a supplier",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Supplier ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Supplier deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid supplier ID",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Supplier not found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get a paginated list of users with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "admin",
                            "manager",
                            "staff",
                            "viewer"
                        ],
                        "type": "string",
                        "description": "Filter by role",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by username or email",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.UserResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User creation request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get a specific user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing user's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ApiResponse": {
            "description": "Simple API response with success status, message and data",
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "CategoryHierarchyResponse": {
            "description": "Hierarchical representation of categories",
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/CategoryResponse"
                },
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CategoryHierarchyResponse"
                    }
                }
            }
        },
        "CategoryListResponse": {
            "description": "Paginated list of categories",
            "type": "object",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CategoryResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/PaginationResponse"
                }
            }
        },
        "CategoryPathResponse": {
            "description": "Category path from root to target category",
            "type": "object",
            "properties": {
                "path": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CategoryResponse"
                    }
                }
            }
        },
        "CategoryResponse": {
            "description": "Category information in API responses",
            "type": "object",
            "properties": {
                "children_count": {
                    "type": "integer",
                    "example": 5
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-15T09:30:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Electronic devices and accessories"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "level": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Electronics"
                },
                "parent_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440001"
                },
                "path": {
                    "type": "string",
                    "example": "Electronics/Computers"
                },
                "product_count": {
                    "type": "integer",
                    "example": 25
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-15T09:30:00Z"
                }
            }
        },
        "CreateCategoryRequest": {
            "description": "Request payload for creating a new category",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "Electronic devices and accessories"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "Electronics"
                },
                "parent_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "ErrorResponse": {
            "description": "Standard error API response structure",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request"
                },
                "message": {
                    "type": "string",
                    "example": "Detailed error message"
                }
            }
        },
        "MoveCategoryRequest": {
            "description": "Request payload for moving a category to a different parent",
            "type": "object",
            "properties": {
                "new_parent_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440002"
                }
            }
        },
        "PaginationResponse": {
            "description": "Pagination information for list responses",
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "page_size": {
                    "type": "integer",
                    "example": 20
                },
                "total": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "SuccessResponse": {
            "description": "Standard successful API response structure",
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                }
            }
        },
        "SupplierCreateRequest": {
            "description": "Request body for creating a new supplier",
            "type": "object",
            "required": [
                "code",
                "name"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "123 Business St, City, State 12345"
                },
                "code": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 1,
                    "example": "ACME001"
                },
                "contact_name": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "John Smith"
                },
                "email": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "contact@acme.com"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "ACME Corporation"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Primary supplier for widgets"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "+1-555-123-4567"
                }
            }
        },
        "SupplierDetailResponse": {
            "description": "Detailed supplier information returned by the API",
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "123 Business St, City, State 12345"
                },
                "code": {
                    "type": "string",
                    "example": "ACME001"
                },
                "contact_name": {
                    "type": "string",
                    "example": "John Smith"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "contact@acme.com"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "ACME Corporation"
                },
                "notes": {
                    "type": "string",
                    "example": "Primary supplier for widgets"
                },
                "phone": {
                    "type": "string",
                    "example": "+1-555-123-4567"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-02T12:00:00Z"
                }
            }
        },
        "SupplierUpdateRequest": {
            "description": "Request body for updating an existing supplier",
            "type": "object",
            "required": [
                "code",
                "name"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "123 Business St, City, State 12345"
                },
                "code": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 1,
                    "example": "ACME001"
                },
                "contact_name": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "John Smith"
                },
                "email": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "contact@acme.com"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "ACME Corporation"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Primary supplier for widgets"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "+1-555-123-4567"
                }
            }
        },
        "UpdateCategoryRequest": {
            "description": "Request payload for updating an existing category",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "Electronic devices and accessories"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "Electronics"
                }
            }
        },
        "audit.UserActivity": {
            "type": "object",
            "properties": {
                "log_count": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.AuditLogResponse": {
            "type": "object",
            "properties": {
                "action": {
                    "$ref": "#/definitions/models.AuditAction"
                },
                "audit_table": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "string"
                },
                "new_values": {},
                "old_values": {},
                "record_id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "user_agent": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.AuditStatisticsResponse": {
            "type": "object",
            "properties": {
                "logs_by_action": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "logs_by_table": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "recent_activity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AuditLogResponse"
                    }
                },
                "top_users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/audit.UserActivity"
                    }
                },
                "total_logs": {
                    "type": "integer"
                }
            }
        },
        "dto.BaseResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "$ref": "#/definitions/dto.ErrorInfo"
                },
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                }
            }
        },
        "dto.BrandResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "BOSCH"
                },
                "country_code": {
                    "type": "string",
                    "example": "DE"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "German automotive parts manufacturer"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "logo_url": {
                    "type": "string",
                    "example": "https://example.com/logos/bosch.png"
                },
                "name": {
                    "type": "string",
                    "example": "Bosch"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "website": {
                    "type": "string",
                    "example": "https://www.bosch.com"
                }
            }
        },
        "dto.CategoryStockSummary": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "string"
                },
                "category_name": {
                    "type": "string"
                },
                "total_items": {
                    "type": "integer"
                },
                "total_value": {
                    "type": "number"
                }
            }
        },
        "dto.CreateBrandRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "BOSCH"
                },
                "country_code": {
                    "type": "string",
                    "maxLength": 10,
                    "example": "DE"
                },
                "description": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "German automotive parts manufacturer"
                },
                "logo_url": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "https://example.com/logos/bosch.png"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "Bosch"
                },
                "website": {
                    "type": "string",
                    "maxLength": 200,
                    "example": "https://www.bosch.com"
                }
            }
        },
        "dto.CreateCustomerRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "123 Main Street"
                },
                "city": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Kuala Lumpur"
                },
                "code": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "JOH001"
                },
                "country": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Malaysia"
                },
                "credit_limit": {
                    "type": "number",
                    "minimum": 0,
                    "example": 10000
                },
                "email": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "john@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "John Doe"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Regular customer"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "+60123456789"
                },
                "postal_code": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "50000"
                },
                "state": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Selangor"
                },
                "tax_number": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "TAX123456"
                }
            }
        },
        "dto.CreateInventoryRequest": {
            "type": "object",
            "required": [
                "product_id",
                "quantity",
                "reorder_level"
            ],
            "properties": {
                "product_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer",
                    "minimum": 0
                },
                "reorder_level": {
                    "type": "integer",
                    "minimum": 0
                },
                "reserved_quantity": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "dto.CreatePurchaseReceiptItemRequest": {
            "type": "object",
            "required": [
                "product_id",
                "quantity",
                "unit_cost"
            ],
            "properties": {
                "item_discount_amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 10
                },
                "item_discount_percentage": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 5
                },
                "product_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440005"
                },
                "quantity": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 10
                },
                "unit_cost": {
                    "type": "number",
                    "minimum": 0,
                    "example": 100
                }
            }
        },
        "dto.CreatePurchaseReceiptRequest": {
            "type": "object",
            "required": [
                "purchase_date",
                "supplier_id"
            ],
            "properties": {
                "bill_discount_amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 50
                },
                "bill_discount_percentage": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 5
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreatePurchaseReceiptItemRequest"
                    }
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Purchase notes"
                },
                "purchase_date": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "supplier_bill_number": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "SUPP-BILL-001"
                },
                "supplier_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440001"
                }
            }
        },
        "dto.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "role",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "password123"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "manager",
                        "staff",
                        "viewer"
                    ],
                    "example": "manager"
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "john_doe"
                }
            }
        },
        "dto.CustomerResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "123 Main Street"
                },
                "city": {
                    "type": "string",
                    "example": "Kuala Lumpur"
                },
                "code": {
                    "type": "string",
                    "example": "JOH001"
                },
                "country": {
                    "type": "string",
                    "example": "Malaysia"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "credit_limit": {
                    "type": "number",
                    "example": 10000
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "notes": {
                    "type": "string",
                    "example": "Regular customer"
                },
                "phone": {
                    "type": "string",
                    "example": "+60123456789"
                },
                "postal_code": {
                    "type": "string",
                    "example": "50000"
                },
                "state": {
                    "type": "string",
                    "example": "Selangor"
                },
                "tax_number": {
                    "type": "string",
                    "example": "TAX123456"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                }
            }
        },
        "dto.ErrorInfo": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "VALIDATION_ERROR"
                },
                "details": {
                    "type": "string",
                    "example": "Name field is required"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid input parameters"
                }
            }
        },
        "dto.InventoryResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "last_updated": {
                    "type": "string"
                },
                "product_barcode": {
                    "type": "string"
                },
                "product_id": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "product_sku": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "reorder_level": {
                    "type": "integer"
                },
                "reserved_quantity": {
                    "type": "integer"
                }
            }
        },
        "dto.InventorySummaryItem": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "product_id": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "product_sku": {
                    "type": "string"
                },
                "reorder_level": {
                    "type": "integer"
                },
                "stock_value": {
                    "type": "number"
                },
                "total_stock": {
                    "type": "integer"
                }
            }
        },
        "dto.InventorySummaryResponse": {
            "type": "object",
            "properties": {
                "low_stock_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InventorySummaryItem"
                    }
                },
                "stock_by_category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CategoryStockSummary"
                    }
                },
                "top_products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InventorySummaryItem"
                    }
                },
                "total_products": {
                    "type": "integer"
                },
                "total_stock_value": {
                    "type": "number"
                },
                "zero_stock_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InventorySummaryItem"
                    }
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string",
                    "example": "2023-01-02T12:00:00Z"
                },
                "refresh_token": {
                    "type": "string",
                    "example": "refresh_token_here"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "$ref": "#/definitions/dto.UserResponse"
                }
            }
        },
        "dto.LowStockItemResponse": {
            "type": "object",
            "properties": {
                "deficit": {
                    "type": "integer"
                },
                "product_barcode": {
                    "type": "string"
                },
                "product_id": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "product_sku": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "reorder_level": {
                    "type": "integer"
                }
            }
        },
        "dto.POSLookupResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.POSProduct"
                    }
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "dto.POSProduct": {
            "type": "object",
            "properties": {
                "barcode": {
                    "type": "string"
                },
                "cost_price": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "quick_sale": {
                    "type": "boolean"
                },
                "retail_price": {
                    "type": "number"
                },
                "sku": {
                    "type": "string"
                },
                "tax_category": {
                    "type": "string"
                }
            }
        },
        "dto.PaginatedResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "$ref": "#/definitions/dto.ErrorInfo"
                },
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                }
            }
        },
        "dto.PaginationInfo": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 100
                },
                "total_pages": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "dto.ProductCreateRequest": {
            "type": "object",
            "required": [
                "category_id",
                "name",
                "sku"
            ],
            "properties": {
                "barcode": {
                    "type": "string",
                    "example": "1234567890123"
                },
                "brand_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440002"
                },
                "category_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "cost_price": {
                    "type": "number",
                    "example": 10.5
                },
                "description": {
                    "type": "string",
                    "example": "A sample product for demonstration"
                },
                "dimensions": {
                    "type": "string",
                    "example": "10x5x2 cm"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Sample Product"
                },
                "retail_price": {
                    "type": "number",
                    "example": 15.99
                },
                "sku": {
                    "type": "string",
                    "example": "PROD-001"
                },
                "supplier_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440001"
                },
                "weight": {
                    "type": "number",
                    "example": 0.5
                },
                "wholesale_price": {
                    "type": "number",
                    "example": 12.5
                }
            }
        },
        "dto.ProductInventoryResponse": {
            "type": "object",
            "properties": {
                "available_quantity": {
                    "type": "integer",
                    "example": 45
                },
                "max_level": {
                    "type": "integer",
                    "example": 100
                },
                "quantity": {
                    "type": "integer",
                    "example": 50
                },
                "reorder_level": {
                    "type": "integer",
                    "example": 10
                },
                "reserved_quantity": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "dto.ProductResponse": {
            "type": "object",
            "properties": {
                "barcode": {
                    "type": "string",
                    "example": "1234567890123"
                },
                "brand": {
                    "$ref": "#/definitions/dto.BrandResponse"
                },
                "brand_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440002"
                },
                "category": {
                    "$ref": "#/definitions/CategoryResponse"
                },
                "category_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "cost_price": {
                    "type": "number",
                    "example": 10.5
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "A sample product for demonstration"
                },
                "dimensions": {
                    "type": "string",
                    "example": "10x5x2 cm"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "inventory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ProductInventoryResponse"
                    }
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Sample Product"
                },
                "retail_price": {
                    "type": "number",
                    "example": 15.99
                },
                "sku": {
                    "type": "string",
                    "example": "PROD-001"
                },
                "supplier": {
                    "$ref": "#/definitions/dto.SupplierResponse"
                },
                "supplier_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440001"
                },
                "total_stock": {
                    "type": "integer",
                    "example": 100
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "weight": {
                    "type": "number",
                    "example": 0.5
                },
                "wholesale_price": {
                    "type": "number",
                    "example": 12.5
                }
            }
        },
        "dto.ProductUpdateRequest": {
            "type": "object",
            "properties": {
                "barcode": {
                    "type": "string",
                    "example": "1234567890124"
                },
                "brand_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440002"
                },
                "category_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "cost_price": {
                    "type": "number",
                    "example": 11
                },
                "description": {
                    "type": "string",
                    "example": "Updated description"
                },
                "dimensions": {
                    "type": "string",
                    "example": "11x5x2 cm"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Updated Product Name"
                },
                "retail_price": {
                    "type": "number",
                    "example": 16.99
                },
                "supplier_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440001"
                },
                "weight": {
                    "type": "number",
                    "example": 0.6
                },
                "wholesale_price": {
                    "type": "number",
                    "example": 13.5
                }
            }
        },
        "dto.PurchaseReceiptItemResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamps",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440004"
                },
                "item_discount_amount": {
                    "type": "number",
                    "example": 10
                },
                "item_discount_percentage": {
                    "type": "number",
                    "example": 5
                },
                "line_total": {
                    "type": "number",
                    "example": 945
                },
                "product_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440005"
                },
                "purchase_receipt_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "quantity": {
                    "description": "Essential Information",
                    "type": "integer",
                    "example": 10
                },
                "unit_cost": {
                    "type": "number",
                    "example": 100
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                }
            }
        },
        "dto.PurchaseReceiptResponse": {
            "type": "object",
            "properties": {
                "bill_discount_amount": {
                    "description": "Financial Information",
                    "type": "number",
                    "example": 50
                },
                "bill_discount_percentage": {
                    "type": "number",
                    "example": 5
                },
                "created_at": {
                    "description": "Timestamps",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "created_by_id": {
                    "description": "User Tracking",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440002"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "items": {
                    "description": "Items",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PurchaseReceiptItemResponse"
                    }
                },
                "notes": {
                    "description": "Additional Information",
                    "type": "string",
                    "example": "Urgent order"
                },
                "purchase_date": {
                    "description": "Essential Information",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "receipt_number": {
                    "type": "string",
                    "example": "PR-2024-001"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PurchaseReceiptStatus"
                        }
                    ],
                    "example": "pending"
                },
                "supplier_bill_number": {
                    "type": "string",
                    "example": "SUPP-001"
                },
                "supplier_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440001"
                },
                "total_amount": {
                    "type": "number",
                    "example": 1110
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                }
            }
        },
        "dto.ReorderLevelUpdate": {
            "type": "object",
            "required": [
                "product_id",
                "reorder_level"
            ],
            "properties": {
                "product_id": {
                    "type": "string"
                },
                "reorder_level": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "dto.StockAdjustmentRequest": {
            "type": "object",
            "required": [
                "movement_type",
                "product_id",
                "quantity",
                "reason"
            ],
            "properties": {
                "movement_type": {
                    "type": "string",
                    "enum": [
                        "IN",
                        "OUT",
                        "ADJUSTMENT"
                    ]
                },
                "notes": {
                    "type": "string"
                },
                "product_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "reason": {
                    "type": "string",
                    "enum": [
                        "receiving",
                        "sale",
                        "sales",
                        "damage",
                        "corrections",
                        "correction",
                        "inventory_count",
                        "return",
                        "supplier_return",
                        "other"
                    ]
                }
            }
        },
        "dto.StockMovementResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "movement_type": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "product_id": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "product_sku": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "reference_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "dto.SupplierResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "SUP-001"
                },
                "email": {
                    "type": "string",
                    "example": "supplier@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Supplier Name"
                },
                "phone": {
                    "type": "string",
                    "example": "+1-555-0123"
                }
            }
        },
        "dto.UpdateBrandRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "BOSCH2"
                },
                "country_code": {
                    "type": "string",
                    "maxLength": 10,
                    "example": "DE"
                },
                "description": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "Updated description"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "logo_url": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "https://example.com/logos/bosch-new.png"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "Bosch Updated"
                },
                "website": {
                    "type": "string",
                    "maxLength": 200,
                    "example": "https://www.bosch-updated.com"
                }
            }
        },
        "dto.UpdateCustomerRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "456 Updated Street"
                },
                "city": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Kuala Lumpur"
                },
                "code": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "JOH002"
                },
                "country": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Malaysia"
                },
                "credit_limit": {
                    "type": "number",
                    "minimum": 0,
                    "example": 15000
                },
                "email": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "john.updated@example.com"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "John Doe Updated"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Updated notes"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "+60123456789"
                },
                "postal_code": {
                    "type": "string",
                    "maxLength": 20,
                    "example": "50000"
                },
                "state": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Selangor"
                },
                "tax_number": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "TAX123456"
                }
            }
        },
        "dto.UpdatePurchaseReceiptItemRequest": {
            "type": "object",
            "properties": {
                "item_discount_amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 10
                },
                "item_discount_percentage": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 5
                },
                "quantity": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 10
                },
                "unit_cost": {
                    "type": "number",
                    "minimum": 0,
                    "example": 100
                }
            }
        },
        "dto.UpdatePurchaseReceiptRequest": {
            "type": "object",
            "properties": {
                "bill_discount_amount": {
                    "type": "number",
                    "minimum": 0,
                    "example": 50
                },
                "bill_discount_percentage": {
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0,
                    "example": 5
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Purchase notes"
                },
                "purchase_date": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "supplier_bill_number": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "SUPP-BILL-001"
                },
                "supplier_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440001"
                }
            }
        },
        "dto.UpdateReorderLevelsRequest": {
            "type": "object",
            "required": [
                "reorder_levels"
            ],
            "properties": {
                "reorder_levels": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/dto.ReorderLevelUpdate"
                    }
                }
            }
        },
        "dto.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john_updated@example.com"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "manager",
                        "staff",
                        "viewer"
                    ],
                    "example": "staff"
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "john_doe_updated"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "last_login": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "manager",
                        "staff",
                        "viewer"
                    ],
                    "example": "manager"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "dto.ZeroStockItemResponse": {
            "type": "object",
            "properties": {
                "last_updated": {
                    "type": "string"
                },
                "product_barcode": {
                    "type": "string"
                },
                "product_id": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "product_sku": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "handlers.LoginResponse": {
            "type": "object",
            "properties": {
                "expires_in": {
                    "type": "integer",
                    "example": 86400
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIs..."
                },
                "user": {
                    "$ref": "#/definitions/dto.UserResponse"
                }
            }
        },
        "models.AuditAction": {
            "type": "string",
            "enum": [
                "CREATE",
                "UPDATE",
                "DELETE",
                "LOGIN",
                "LOGOUT"
            ],
            "x-enum-varnames": [
                "ActionCreate",
                "ActionUpdate",
                "ActionDelete",
                "ActionLogin",
                "ActionLogout"
            ]
        },
        "models.PurchaseReceiptStatus": {
            "type": "string",
            "enum": [
                "pending",
                "received",
                "completed",
                "cancelled"
            ],
            "x-enum-comments": {
                "PurchaseReceiptStatusCancelled": "Order cancelled",
                "PurchaseReceiptStatusCompleted": "Fully received and processed",
                "PurchaseReceiptStatusPending": "Order created, awaiting processing",
                "PurchaseReceiptStatusReceived": "Goods received, being processed"
            },
            "x-enum-descriptions": [
                "Order created, awaiting processing",
                "Goods received, being processed",
                "Fully received and processed",
                "Order cancelled"
            ],
            "x-enum-varnames": [
                "PurchaseReceiptStatusPending",
                "PurchaseReceiptStatusReceived",
                "PurchaseReceiptStatusCompleted",
                "PurchaseReceiptStatusCancelled"
            ]
        },
        "router.HealthResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "ok"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}