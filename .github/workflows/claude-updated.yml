name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: inventory_db
          POSTGRES_USER: inventory_user
          POSTGRES_PASSWORD: inventory_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Create config file
        run: |
          cp config.yaml.example config.yml
          # Config is already set up for the test database

      - name: Download dependencies
        run: go mod download

      - name: Verify database connection
        run: |
          # Install postgresql-client for testing
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          # Test connection
          PGPASSWORD=inventory_pass psql -h localhost -U inventory_user -d inventory_db -c "SELECT version();"

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          # Allow Claude to run Go commands and tests
          allowed_tools: |
            Bash(go build:*),Bash(go get:*),Bash(./tui-inventory:*),Bash(timeout:*),Bash(go run:*),Bash(go test:*),Bash(go mod:*),Bash(find:*),Bash(go vet:*),Bash(go install:*),Bash(grep:*),Bash(swag init:*),Bash(swag:*)
          
          # Custom instructions for the Go inventory project
          custom_instructions: |
            This is a Go-based TUI inventory management system using Bubble Tea v2, GORM, and PostgreSQL.
            
            Key project requirements:
            - Follow clean architecture with 3-layer separation (UI/Business/Repository)
            - Use GORM for database operations
            - Maintain audit trails for all data modifications
            - Follow Go naming conventions and best practices
            - Database credentials: inventory_user:inventory_pass@localhost:5432/inventory_db
            
            Available commands:
            - Build: go build ./cmd/main.go
            - Run: go run cmd/main.go
            - Test: go test ./... or go test -v ./internal/...
            - Dependencies: go mod tidy
            
            The project structure follows:
            - cmd/main.go: Application entry point
            - internal/ui/: TUI layer (Bubble Tea)
            - internal/business/: Business logic layer
            - internal/repository/: Data access layer
            - config.yml: Configuration file (created from config.yaml.example)
          
          # Set up environment for the application
          claude_env: |
            CGO_ENABLED: 1
            GOARCH: amd64
            GOOS: linux