name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: inventory_db
          POSTGRES_USER: inventory_user
          POSTGRES_PASSWORD: inventory_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.11'
          cache: true

      - name: Create config.yaml from example
        run: |
          cp config.yaml.example config.yaml
          # Update database host for CI environment
          sed -i 's/host: "localhost"/host: "localhost"/' config.yaml

      - name: Install dependencies
        run: go mod download

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U inventory_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Additional permissions for Claude to create PRs and commit changes
          additional_permissions: |
            actions: read
            contents: write
            pull-requests: write
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow Claude to run Go-specific commands and git operations for this project
          allowed_tools: "Bash(go build:*),Bash(go get:*),Bash(./tui-inventory:*),Bash(timeout:*),Bash(go run:*),Bash(go test:*),WebFetch(domain:github.com),WebFetch(domain:pkg.go.dev),Bash(go mod:*),Bash(find:*),Bash(go vet:*),Bash(go install:*),Bash(grep:*),Bash(swag init:*),Bash(swag:*),Bash(git *),Bash(gh *)"
          
          # Custom instructions for this Go API inventory project
          custom_instructions: |
            This is a Go-based REST API inventory management system using GORM and PostgreSQL.
            Follow the clean architecture pattern with 3-layer separation.
            Use the repository pattern for all database operations.
            Maintain audit trails for all data modifications.
            
            IMPORTANT: When you make changes to files, always create a pull request to preserve your work.
            Use git commands to create branches, commit changes, and create PRs via gh CLI.
            
            Available custom slash commands:
            - /api-migration - TUI to REST API migration workflow with steps: setup, swagger, users, products, inventory, suppliers, locations, audit, test, status
            
            The system supports incremental API implementation with Swagger documentation.
          
          # Environment variables for the Go application
          claude_env: |
            DATABASE_URL: postgres://inventory_user:inventory_pass@localhost:5432/inventory_db?sslmode=disable
            GO111MODULE: on
            CGO_ENABLED: 1

