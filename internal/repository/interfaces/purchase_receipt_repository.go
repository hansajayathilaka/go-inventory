package interfaces

import (
	"context"
	"time"

	"github.com/google/uuid"
	"inventory-api/internal/repository/models"
)

// PurchaseReceiptRepository defines the interface for purchase receipt data access operations
type PurchaseReceiptRepository interface {
	// Basic CRUD operations
	Create(ctx context.Context, receipt *models.PurchaseReceipt) error
	CreateWithAutoGeneratedNumber(ctx context.Context, receipt *models.PurchaseReceipt) error
	GetByID(ctx context.Context, id uuid.UUID) (*models.PurchaseReceipt, error)
	GetByReceiptNumber(ctx context.Context, receiptNumber string) (*models.PurchaseReceipt, error)
	Update(ctx context.Context, receipt *models.PurchaseReceipt) error
	Delete(ctx context.Context, id uuid.UUID) error
	
	// List operations
	List(ctx context.Context, offset, limit int) ([]*models.PurchaseReceipt, int64, error)
	GetBySupplier(ctx context.Context, supplierID uuid.UUID, offset, limit int) ([]*models.PurchaseReceipt, int64, error)
	GetByStatus(ctx context.Context, status models.PurchaseReceiptStatus, offset, limit int) ([]*models.PurchaseReceipt, int64, error)
	GetByUser(ctx context.Context, userID uuid.UUID, offset, limit int) ([]*models.PurchaseReceipt, int64, error)
	
	// Date-based operations
	GetByDateRange(ctx context.Context, startDate, endDate time.Time, offset, limit int) ([]*models.PurchaseReceipt, int64, error)
	GetByPurchaseDateRange(ctx context.Context, startDate, endDate time.Time, offset, limit int) ([]*models.PurchaseReceipt, int64, error)
	
	// Search operations
	Search(ctx context.Context, receiptNumber, supplierName, supplierBillNumber string, status models.PurchaseReceiptStatus, startDate, endDate *time.Time, createdByID *uuid.UUID, offset, limit int) ([]*models.PurchaseReceipt, int64, error)
	
	// Status operations
	UpdateStatus(ctx context.Context, id uuid.UUID, status models.PurchaseReceiptStatus, updatedByID uuid.UUID) error
	MarkAsReceived(ctx context.Context, id uuid.UUID) error
	MarkAsCompleted(ctx context.Context, id uuid.UUID) error
	Cancel(ctx context.Context, id uuid.UUID) error
	
	// Item operations
	CreateItem(ctx context.Context, item *models.PurchaseReceiptItem) error
	GetItem(ctx context.Context, itemID uuid.UUID) (*models.PurchaseReceiptItem, error)
	GetItemsByReceipt(ctx context.Context, receiptID uuid.UUID) ([]*models.PurchaseReceiptItem, error)
	UpdateItem(ctx context.Context, item *models.PurchaseReceiptItem) error
	DeleteItem(ctx context.Context, itemID uuid.UUID) error
	
	// Financial operations
	UpdateDiscounts(ctx context.Context, id uuid.UUID, billDiscountAmount, billDiscountPercentage float64) error
	RecalculateTotal(ctx context.Context, id uuid.UUID) error
	
	// Reporting operations
	GetStatsByDateRange(ctx context.Context, startDate, endDate time.Time) (map[string]interface{}, error)
	GetTopSuppliers(ctx context.Context, limit int, startDate, endDate *time.Time) ([]map[string]interface{}, error)
	GetPendingReceipts(ctx context.Context) ([]*models.PurchaseReceipt, error)
	
	// Code generation
	GenerateReceiptNumber(ctx context.Context) (string, error)
}